import type { Web3Context, Web3ContextInitOptions } from 'web3-core';
import type * as web3Types from 'web3-types';
import type { Address } from 'web3-types';
import { Contract } from 'web3-eth-contract';
import { Web3PluginBase } from 'web3-core';
import { IERC20ABI } from './contracts/IERC20';
import { RpcMethods } from './rpc.methods';
import { IL2BridgeABI } from './contracts/IL2Bridge';
import { ZKsyncWallet } from './zksync-wallet';
import { Web3ZKsyncL2 } from './web3zksync-l2';
import { Web3ZKsyncL1 } from './web3zksync-l1';
import { ContractsAddresses, SmartAccountSigner, ZKSyncContractsCollection } from './types';
import { SmartAccount } from './smart-account';
interface ZKsyncWalletConstructor {
    new (privateKey: string): ZKsyncWallet;
}
interface ZKsyncAccountConstructor {
    new (signer: SmartAccountSigner): SmartAccount;
}
interface ZKsyncECDSASmartAccountConstructor {
    create(address: string, secret: string): SmartAccount;
}
interface ZKsyncMultisigECDSASmartAccountConstructor {
    create(address: string, secret: string[]): SmartAccount;
}
export declare class ZKsyncPlugin extends Web3PluginBase {
    L1: Web3ZKsyncL1 | undefined;
    L2: Web3ZKsyncL2;
    pluginNamespace: string;
    _rpc?: RpcMethods;
    _l2BridgeContracts: Record<Address, Contract<typeof IL2BridgeABI>>;
    _erc20Contracts: Record<Address, Contract<typeof IERC20ABI>>;
    private contracts;
    get Contracts(): Promise<ZKSyncContractsCollection>;
    contractsAddresses: Promise<ContractsAddresses> | undefined;
    get ContractsAddresses(): Promise<ContractsAddresses>;
    Wallet: ZKsyncWalletConstructor;
    SmartAccount: ZKsyncAccountConstructor;
    ECDSASmartAccount: ZKsyncECDSASmartAccountConstructor;
    MultisigECDSASmartAccount: ZKsyncMultisigECDSASmartAccountConstructor;
    constructor(providerOrContextL2: string | web3Types.SupportedProviders<any> | Web3ContextInitOptions | Web3ZKsyncL2);
    initContracts(): Promise<ZKSyncContractsCollection>;
    initContractsAddresses(): Promise<ContractsAddresses>;
    link(parentContext: Web3Context): void;
    private initWallet;
    get rpc(): RpcMethods;
    updateProviders(contextL1: Web3ZKsyncL1 | web3Types.SupportedProviders<any> | Web3ContextInitOptions | string, contextL2: Web3ZKsyncL2 | web3Types.SupportedProviders<any> | Web3ContextInitOptions | string): void;
    getL2BridgeContract(address: Address): Contract<typeof IL2BridgeABI>;
    erc20(address: string): Contract<typeof IERC20ABI>;
    getL1Address(token: Address): Promise<Address>;
    getL2Address(token: Address): Promise<string>;
}
declare module 'web3' {
    interface Web3 {
        ZKsync: ZKsyncPlugin;
    }
}
export {};
//# sourceMappingURL=plugin.d.ts.map
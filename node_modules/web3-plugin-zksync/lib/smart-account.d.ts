import { Address, BlockTag, Eip712TxData, Numbers, PayloadSigner, PaymasterParams, PriorityOpResponse, SmartAccountSigner, TransactionBuilder, type TransactionOverrides, TypedDataDomain, TypedDataField, type WalletBalances } from './types';
import { Web3ZKsyncL2 } from './web3zksync-l2';
import type * as web3Types from 'web3-types';
import { AdapterL2 } from './adapters';
export declare class SmartAccount extends AdapterL2 {
    protected payloadSigner: PayloadSigner;
    protected transactionBuilder: TransactionBuilder;
    private _account;
    private _address;
    private _provider?;
    constructor(signer: SmartAccountSigner, provider?: Web3ZKsyncL2);
    _contextL2(): Web3ZKsyncL2;
    get provider(): Web3ZKsyncL2;
    get secret(): string | string[];
    get address(): string;
    getAddress(): string;
    getNonce(blockNumber?: web3Types.BlockNumberOrTag): Promise<bigint>;
    connect(provider?: Web3ZKsyncL2 | null): SmartAccount;
    getBalance(token?: Address, blockTag?: BlockTag): Promise<bigint>;
    getAllBalances(): Promise<WalletBalances>;
    getDeploymentNonce(): Promise<bigint>;
    populateTransaction(tx: Eip712TxData | web3Types.Transaction): Promise<web3Types.Transaction | Eip712TxData>;
    signTransaction(tx: web3Types.Transaction | Eip712TxData): Promise<string>;
    sendTransaction(tx: web3Types.Transaction): Promise<PriorityOpResponse>;
    signMessage(message: string | Uint8Array): string;
    signTypedData(domain: TypedDataDomain, types: Record<string, TypedDataField[]>, value: Record<string, any>): Promise<string>;
    withdraw(transaction: {
        token: Address;
        amount: Numbers;
        to?: Address;
        bridgeAddress?: Address;
        paymasterParams?: PaymasterParams;
        overrides?: TransactionOverrides;
    }): Promise<PriorityOpResponse>;
    transfer(transaction: {
        to: Address;
        amount: Numbers;
        token?: Address;
        paymasterParams?: PaymasterParams;
        overrides?: TransactionOverrides;
    }): Promise<PriorityOpResponse>;
}
export declare class ECDSASmartAccount {
    static create(address: string, secret: string, provider: Web3ZKsyncL2): SmartAccount;
}
export declare class MultisigECDSASmartAccount {
    static create(address: string, secret: string[], provider: Web3ZKsyncL2): SmartAccount;
}
//# sourceMappingURL=smart-account.d.ts.map
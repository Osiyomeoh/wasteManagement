"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RpcMethods = void 0;
const web3Utils = __importStar(require("web3-utils"));
const web3_1 = require("web3");
const schemas_1 = require("./schemas");
class RpcMethods {
    constructor(requestManager) {
        this.requestManager = requestManager;
    }
    async _send(method, params) {
        return this.requestManager.send({
            method,
            params,
        });
    }
    async l1ChainId(returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.IntSchema, await this._send('zks_L1ChainId', []), returnFormat);
    }
    async getL1BatchNumber(returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.IntSchema, await this._send('zks_L1BatchNumber', []), returnFormat);
    }
    async getL1BatchDetails(number, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.BatchDetailsSchema, await this._send('zks_getL1BatchDetails', [
            typeof number === 'number' ? number : Number(web3Utils.toNumber(number)),
        ]), returnFormat);
    }
    async getBlockDetails(number, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.BlockDetailsSchema, await this._send('zks_getBlockDetails', [
            typeof number === 'number' ? number : Number(web3Utils.toNumber(number)),
        ]), returnFormat);
    }
    async getTransactionDetails(txHash, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.TransactionDetailsSchema, await this._send('zks_getTransactionDetails', [txHash]), returnFormat);
    }
    async getBytecodeByHash(bytecodeHash, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.BytesSchema, await this._send('zks_getBytecodeByHash', [bytecodeHash]), returnFormat);
    }
    async getRawBlockTransactions(number, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        const result = await this._send('zks_getRawBlockTransactions', [
            typeof number === 'number' ? number : Number(web3Utils.toNumber(number)),
        ]);
        if (Array.isArray(result)) {
            return result.map(tx => {
                return web3Utils.format(schemas_1.RawBlockTransactionSchema, tx, returnFormat);
            });
        }
        return [];
    }
    async estimateFee(transaction, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.EstimateFeeSchema, await this._send('zks_estimateFee', [transaction]), returnFormat);
    }
    async getBaseTokenL1Address() {
        const baseTokenL1Address = (await this._send('zks_getBaseTokenL1Address', []));
        return web3Utils.toChecksumAddress(baseTokenL1Address);
    }
    async getTestnetPaymasterAddress() {
        return (await this._send('zks_getTestnetPaymaster', []));
    }
    async estimateGasL1ToL2(transaction, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.UintSchema, await this._send('zks_estimateGasL1ToL2', [transaction]), returnFormat);
    }
    async getAllAccountBalances(address, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        const res = (await this._send('zks_getAllAccountBalances', [address]));
        if (!res) {
            return {};
        }
        for (let i = 0; i < Object.keys(res).length; i++) {
            res[Object.keys(res)[i]] = web3Utils.format(schemas_1.UintSchema, res[Object.keys(res)[i]], returnFormat);
        }
        return res;
    }
    async getMainContract(returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.AddressSchema, await this._send('zks_getMainContract', []), returnFormat);
    }
    async getL1BatchBlockRange(number, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.BytesArraySchema, await this._send('zks_getL1BatchBlockRange', [
            typeof number === 'number' ? number : Number(web3Utils.toNumber(number)),
        ]), returnFormat);
    }
    async getProof(address, keys, l1BatchNumber, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        const res = (await this._send('zks_getProof', [
            address,
            keys,
            typeof l1BatchNumber === 'number'
                ? l1BatchNumber
                : Number(web3Utils.toNumber(l1BatchNumber)),
        ]));
        const result = web3Utils.format(schemas_1.ProofSchema, res, returnFormat);
        result.storageProof = [];
        for (let i = 0; i < res.storageProof.length; i++) {
            result.storageProof[i] = web3Utils.format({
                type: 'object',
                properties: schemas_1.ProofSchema.properties.storageProof.properties,
            }, res.storageProof[i], returnFormat);
        }
        return result;
    }
    async getL2ToL1LogProof(txHash, l2ToL1LogIndex, returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        const params = [txHash];
        if (l2ToL1LogIndex) {
            params.push(typeof l2ToL1LogIndex === 'number'
                ? l2ToL1LogIndex
                : Number(web3Utils.toNumber(l2ToL1LogIndex)));
        }
        return web3Utils.format(schemas_1.L2ToL1ProofSchema, await this._send('zks_getL2ToL1LogProof', params), returnFormat);
    }
    async getBridgeContracts(returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.BridgeAddressesSchema, await this._send('zks_getBridgeContracts', []), returnFormat);
    }
    async getBridgehubContractAddress(returnFormat = web3_1.DEFAULT_RETURN_FORMAT) {
        return web3Utils.format(schemas_1.AddressSchema, await this._send('zks_getBridgehubContract', []), returnFormat);
    }
}
exports.RpcMethods = RpcMethods;
//# sourceMappingURL=rpc.methods.js.map
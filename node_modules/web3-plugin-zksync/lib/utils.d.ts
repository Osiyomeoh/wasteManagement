import * as web3 from 'web3';
import * as web3Types from 'web3-types';
import type { BlockNumberOrTag, Bytes, TransactionHash, TransactionReceipt } from 'web3-types';
import type { Web3Eth } from 'web3-eth';
import { NameResolver, PriorityOpTree, PriorityQueueType } from './types';
import type { DeploymentInfo, EthereumSignature, PriorityL2OpResponse, PriorityOpResponse } from './types';
import type { Web3ZKsyncL2 } from './web3zksync-l2';
import { Web3ZKsyncL1 } from './web3zksync-l1';
import { Address } from 'web3';
export * from './Eip712';
export declare const ZkSyncMainContract: web3.Contract<readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "batchNumber";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "batchHash";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "commitment";
        readonly type: "bytes32";
    }];
    readonly name: "BlockCommit";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "batchNumber";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "batchHash";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "commitment";
        readonly type: "bytes32";
    }];
    readonly name: "BlockExecution";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalBatchesCommitted";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalBatchesVerified";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "totalBatchesExecuted";
        readonly type: "uint256";
    }];
    readonly name: "BlocksRevert";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "previousLastVerifiedBatch";
        readonly type: "uint256";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "currentLastVerifiedBatch";
        readonly type: "uint256";
    }];
    readonly name: "BlocksVerification";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "EthWithdrawalFinalized";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "initAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "initCalldata";
            readonly type: "bytes";
        }];
        readonly indexed: false;
        readonly internalType: "struct Diamond.DiamondCutData";
        readonly name: "diamondCut";
        readonly type: "tuple";
    }];
    readonly name: "ExecuteUpgrade";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "Freeze";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isPorterAvailable";
        readonly type: "bool";
    }];
    readonly name: "IsPorterAvailableStatusUpdate";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "oldAdmin";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newAdmin";
        readonly type: "address";
    }];
    readonly name: "NewAdmin";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint128";
        readonly name: "oldNominator";
        readonly type: "uint128";
    }, {
        readonly indexed: false;
        readonly internalType: "uint128";
        readonly name: "oldDenominator";
        readonly type: "uint128";
    }, {
        readonly indexed: false;
        readonly internalType: "uint128";
        readonly name: "newNominator";
        readonly type: "uint128";
    }, {
        readonly indexed: false;
        readonly internalType: "uint128";
        readonly name: "newDenominator";
        readonly type: "uint128";
    }];
    readonly name: "NewBaseTokenMultiplier";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "enum PubdataPricingMode";
            readonly name: "pubdataPricingMode";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint32";
            readonly name: "batchOverheadL1Gas";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxPubdataPerBatch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxL2GasPerBatch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "priorityTxMaxPubdata";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "minimalL2GasPrice";
            readonly type: "uint64";
        }];
        readonly indexed: false;
        readonly internalType: "struct FeeParams";
        readonly name: "oldFeeParams";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "enum PubdataPricingMode";
            readonly name: "pubdataPricingMode";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint32";
            readonly name: "batchOverheadL1Gas";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxPubdataPerBatch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxL2GasPerBatch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "priorityTxMaxPubdata";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "minimalL2GasPrice";
            readonly type: "uint64";
        }];
        readonly indexed: false;
        readonly internalType: "struct FeeParams";
        readonly name: "newFeeParams";
        readonly type: "tuple";
    }];
    readonly name: "NewFeeParams";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "oldPendingAdmin";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newPendingAdmin";
        readonly type: "address";
    }];
    readonly name: "NewPendingAdmin";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "txId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes32";
        readonly name: "txHash";
        readonly type: "bytes32";
    }, {
        readonly indexed: false;
        readonly internalType: "uint64";
        readonly name: "expirationTimestamp";
        readonly type: "uint64";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "txType";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "from";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "to";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "gasPerPubdataByteLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxFeePerGas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxPriorityFeePerGas";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "paymaster";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "nonce";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256[4]";
            readonly name: "reserved";
            readonly type: "uint256[4]";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "signature";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "factoryDeps";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "bytes";
            readonly name: "paymasterInput";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "reservedDynamic";
            readonly type: "bytes";
        }];
        readonly indexed: false;
        readonly internalType: "struct L2CanonicalTransaction";
        readonly name: "transaction";
        readonly type: "tuple";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes[]";
        readonly name: "factoryDeps";
        readonly type: "bytes[]";
    }];
    readonly name: "NewPriorityRequest";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "oldPriorityTxMaxGasLimit";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "newPriorityTxMaxGasLimit";
        readonly type: "uint256";
    }];
    readonly name: "NewPriorityTxMaxGasLimit";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "oldTransactionFilterer";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "newTransactionFilterer";
        readonly type: "address";
    }];
    readonly name: "NewTransactionFilterer";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "initAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "initCalldata";
            readonly type: "bytes";
        }];
        readonly indexed: false;
        readonly internalType: "struct Diamond.DiamondCutData";
        readonly name: "diamondCut";
        readonly type: "tuple";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "proposalId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes32";
        readonly name: "proposalSalt";
        readonly type: "bytes32";
    }];
    readonly name: "ProposeTransparentUpgrade";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [];
    readonly name: "Unfreeze";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "validatorAddress";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "bool";
        readonly name: "isActive";
        readonly type: "bool";
    }];
    readonly name: "ValidatorStatusUpdate";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "enum PubdataPricingMode";
        readonly name: "validiumMode";
        readonly type: "uint8";
    }];
    readonly name: "ValidiumModeStatusUpdate";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "acceptAdmin";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "baseTokenGasPriceMultiplierDenominator";
    readonly outputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "baseTokenGasPriceMultiplierNominator";
    readonly outputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "";
        readonly type: "uint128";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "contractL2";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "mintValue";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "l2Calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2GasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2GasPerPubdataByteLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "factoryDeps";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "address";
            readonly name: "refundRecipient";
            readonly type: "address";
        }];
        readonly internalType: "struct BridgehubL2TransactionRequest";
        readonly name: "_request";
        readonly type: "tuple";
    }];
    readonly name: "bridgehubRequestL2Transaction";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "canonicalTxHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "enum PubdataPricingMode";
            readonly name: "pubdataPricingMode";
            readonly type: "uint8";
        }, {
            readonly internalType: "uint32";
            readonly name: "batchOverheadL1Gas";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxPubdataPerBatch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "maxL2GasPerBatch";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint32";
            readonly name: "priorityTxMaxPubdata";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "minimalL2GasPrice";
            readonly type: "uint64";
        }];
        readonly internalType: "struct FeeParams";
        readonly name: "_newFeeParams";
        readonly type: "tuple";
    }];
    readonly name: "changeFeeParams";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo";
        readonly name: "_lastCommittedBatchData";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "timestamp";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "newStateRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "bootloaderHeapInitialContentsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "eventsQueueStateHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "systemLogs";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pubdataCommitments";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IExecutor.CommitBatchInfo[]";
        readonly name: "_newBatchesData";
        readonly type: "tuple[]";
    }];
    readonly name: "commitBatches";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo";
        readonly name: "_lastCommittedBatchData";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "timestamp";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "newStateRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "bootloaderHeapInitialContentsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "eventsQueueStateHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes";
            readonly name: "systemLogs";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "pubdataCommitments";
            readonly type: "bytes";
        }];
        readonly internalType: "struct IExecutor.CommitBatchInfo[]";
        readonly name: "_newBatchesData";
        readonly type: "tuple[]";
    }];
    readonly name: "commitBatchesSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo[]";
        readonly name: "_batchesData";
        readonly type: "tuple[]";
    }];
    readonly name: "executeBatches";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo[]";
        readonly name: "_batchesData";
        readonly type: "tuple[]";
    }];
    readonly name: "executeBatchesSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "initAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "initCalldata";
            readonly type: "bytes";
        }];
        readonly internalType: "struct Diamond.DiamondCutData";
        readonly name: "_diamondCut";
        readonly type: "tuple";
    }];
    readonly name: "executeUpgrade";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "_selector";
        readonly type: "bytes4";
    }];
    readonly name: "facetAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "facet";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "facetAddresses";
    readonly outputs: readonly [{
        readonly internalType: "address[]";
        readonly name: "facets";
        readonly type: "address[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_facet";
        readonly type: "address";
    }];
    readonly name: "facetFunctionSelectors";
    readonly outputs: readonly [{
        readonly internalType: "bytes4[]";
        readonly name: "";
        readonly type: "bytes4[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "facets";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "address";
            readonly name: "addr";
            readonly type: "address";
        }, {
            readonly internalType: "bytes4[]";
            readonly name: "selectors";
            readonly type: "bytes4[]";
        }];
        readonly internalType: "struct IGetters.Facet[]";
        readonly name: "";
        readonly type: "tuple[]";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint16";
        readonly name: "_l2TxNumberInBatch";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes";
        readonly name: "_message";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_merkleProof";
        readonly type: "bytes32[]";
    }];
    readonly name: "finalizeEthWithdrawal";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "freezeDiamond";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getAdmin";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getBaseToken";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getBaseTokenBridge";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getBridgehub";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getFirstUnprocessedPriorityTx";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getL2BootloaderBytecodeHash";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getL2DefaultAccountBytecodeHash";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getL2SystemContractsUpgradeBatchNumber";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getL2SystemContractsUpgradeTxHash";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getName";
    readonly outputs: readonly [{
        readonly internalType: "string";
        readonly name: "";
        readonly type: "string";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getPendingAdmin";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getPriorityQueueSize";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getPriorityTxMaxGasLimit";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getProtocolVersion";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getPubdataPricingMode";
    readonly outputs: readonly [{
        readonly internalType: "enum PubdataPricingMode";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getStateTransitionManager";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getTotalBatchesCommitted";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getTotalBatchesExecuted";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getTotalBatchesVerified";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getTotalPriorityTxs";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getVerifier";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "getVerifierParams";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "recursionNodeLevelVkHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "recursionLeafLevelVkHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "recursionCircuitsSetVksHash";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct VerifierParams";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "isDiamondStorageFrozen";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }];
    readonly name: "isEthWithdrawalFinalized";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_facet";
        readonly type: "address";
    }];
    readonly name: "isFacetFreezable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "isFreezable";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "_selector";
        readonly type: "bytes4";
    }];
    readonly name: "isFunctionFreezable";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "isValidator";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_batchNumber";
        readonly type: "uint256";
    }];
    readonly name: "l2LogsRootHash";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "merkleRoot";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_gasPrice";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2GasLimit";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2GasPerPubdataByteLimit";
        readonly type: "uint256";
    }];
    readonly name: "l2TransactionBaseCost";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "priorityQueueFrontOperation";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "canonicalTxHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "expirationTimestamp";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint192";
            readonly name: "layer2Tip";
            readonly type: "uint192";
        }];
        readonly internalType: "struct PriorityOperation";
        readonly name: "";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo";
        readonly name: "_prevBatch";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo[]";
        readonly name: "_committedBatches";
        readonly type: "tuple[]";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "recursiveAggregationInput";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "serializedProof";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct IExecutor.ProofInput";
        readonly name: "_proof";
        readonly type: "tuple";
    }];
    readonly name: "proveBatches";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo";
        readonly name: "_prevBatch";
        readonly type: "tuple";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint64";
            readonly name: "batchNumber";
            readonly type: "uint64";
        }, {
            readonly internalType: "bytes32";
            readonly name: "batchHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint64";
            readonly name: "indexRepeatedStorageChanges";
            readonly type: "uint64";
        }, {
            readonly internalType: "uint256";
            readonly name: "numberOfLayer1Txs";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "priorityOperationsHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "l2LogsTreeRoot";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes32";
            readonly name: "commitment";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct IExecutor.StoredBatchInfo[]";
        readonly name: "_committedBatches";
        readonly type: "tuple[]";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "recursiveAggregationInput";
            readonly type: "uint256[]";
        }, {
            readonly internalType: "uint256[]";
            readonly name: "serializedProof";
            readonly type: "uint256[]";
        }];
        readonly internalType: "struct IExecutor.ProofInput";
        readonly name: "_proof";
        readonly type: "tuple";
    }];
    readonly name: "proveBatchesSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "_l2TxHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint16";
        readonly name: "_l2TxNumberInBatch";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_merkleProof";
        readonly type: "bytes32[]";
    }, {
        readonly internalType: "enum TxStatus";
        readonly name: "_status";
        readonly type: "uint8";
    }];
    readonly name: "proveL1ToL2TransactionStatus";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_batchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_index";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint8";
            readonly name: "l2ShardId";
            readonly type: "uint8";
        }, {
            readonly internalType: "bool";
            readonly name: "isService";
            readonly type: "bool";
        }, {
            readonly internalType: "uint16";
            readonly name: "txNumberInBatch";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "value";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct L2Log";
        readonly name: "_log";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_proof";
        readonly type: "bytes32[]";
    }];
    readonly name: "proveL2LogInclusion";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_batchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_index";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint16";
            readonly name: "txNumberInBatch";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly internalType: "struct L2Message";
        readonly name: "_message";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_proof";
        readonly type: "bytes32[]";
    }];
    readonly name: "proveL2MessageInclusion";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_contractL2";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2Value";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_calldata";
        readonly type: "bytes";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2GasLimit";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2GasPerPubdataByteLimit";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes[]";
        readonly name: "_factoryDeps";
        readonly type: "bytes[]";
    }, {
        readonly internalType: "address";
        readonly name: "_refundRecipient";
        readonly type: "address";
    }];
    readonly name: "requestL2Transaction";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "canonicalTxHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_newLastBatch";
        readonly type: "uint256";
    }];
    readonly name: "revertBatches";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_newLastBatch";
        readonly type: "uint256";
    }];
    readonly name: "revertBatchesSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_newPendingAdmin";
        readonly type: "address";
    }];
    readonly name: "setPendingAdmin";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bool";
        readonly name: "_zkPorterIsAvailable";
        readonly type: "bool";
    }];
    readonly name: "setPorterAvailability";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_newPriorityTxMaxGasLimit";
        readonly type: "uint256";
    }];
    readonly name: "setPriorityTxMaxGasLimit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint128";
        readonly name: "_nominator";
        readonly type: "uint128";
    }, {
        readonly internalType: "uint128";
        readonly name: "_denominator";
        readonly type: "uint128";
    }];
    readonly name: "setTokenMultiplier";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_transactionFilterer";
        readonly type: "address";
    }];
    readonly name: "setTransactionFilterer";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_validator";
        readonly type: "address";
    }, {
        readonly internalType: "bool";
        readonly name: "_active";
        readonly type: "bool";
    }];
    readonly name: "setValidator";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum PubdataPricingMode";
        readonly name: "_validiumMode";
        readonly type: "uint8";
    }];
    readonly name: "setValidiumMode";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_batchNumber";
        readonly type: "uint256";
    }];
    readonly name: "storedBatchHash";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "transferEthToSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "unfreezeDiamond";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_protocolVersion";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "facet";
                readonly type: "address";
            }, {
                readonly internalType: "enum Diamond.Action";
                readonly name: "action";
                readonly type: "uint8";
            }, {
                readonly internalType: "bool";
                readonly name: "isFreezable";
                readonly type: "bool";
            }, {
                readonly internalType: "bytes4[]";
                readonly name: "selectors";
                readonly type: "bytes4[]";
            }];
            readonly internalType: "struct Diamond.FacetCut[]";
            readonly name: "facetCuts";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "address";
            readonly name: "initAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "initCalldata";
            readonly type: "bytes";
        }];
        readonly internalType: "struct Diamond.DiamondCutData";
        readonly name: "_cutData";
        readonly type: "tuple";
    }];
    readonly name: "upgradeChainFromVersion";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}]>;
export declare const BridgehubContract: web3.Contract<readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "oldAdmin";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newAdmin";
        readonly type: "address";
    }];
    readonly name: "NewAdmin";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "chainId";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "stateTransitionManager";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "chainGovernance";
        readonly type: "address";
    }];
    readonly name: "NewChain";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "oldPendingAdmin";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "newPendingAdmin";
        readonly type: "address";
    }];
    readonly name: "NewPendingAdmin";
    readonly type: "event";
}, {
    readonly inputs: readonly [];
    readonly name: "acceptAdmin";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_stateTransitionManager";
        readonly type: "address";
    }];
    readonly name: "addStateTransitionManager";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_token";
        readonly type: "address";
    }];
    readonly name: "addToken";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }];
    readonly name: "baseToken";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_stateTransitionManager";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_baseToken";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_salt";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_admin";
        readonly type: "address";
    }, {
        readonly internalType: "bytes";
        readonly name: "_initData";
        readonly type: "bytes";
    }];
    readonly name: "createNewChain";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "chainId";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }];
    readonly name: "getStateTransition";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_gasPrice";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2GasLimit";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2GasPerPubdataByteLimit";
        readonly type: "uint256";
    }];
    readonly name: "l2TransactionBaseCost";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_l2TxHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint16";
        readonly name: "_l2TxNumberInBatch";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_merkleProof";
        readonly type: "bytes32[]";
    }, {
        readonly internalType: "enum TxStatus";
        readonly name: "_status";
        readonly type: "uint8";
    }];
    readonly name: "proveL1ToL2TransactionStatus";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_batchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_index";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint8";
            readonly name: "l2ShardId";
            readonly type: "uint8";
        }, {
            readonly internalType: "bool";
            readonly name: "isService";
            readonly type: "bool";
        }, {
            readonly internalType: "uint16";
            readonly name: "txNumberInBatch";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "value";
            readonly type: "bytes32";
        }];
        readonly internalType: "struct L2Log";
        readonly name: "_log";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_proof";
        readonly type: "bytes32[]";
    }];
    readonly name: "proveL2LogInclusion";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_batchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_index";
        readonly type: "uint256";
    }, {
        readonly components: readonly [{
            readonly internalType: "uint16";
            readonly name: "txNumberInBatch";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly internalType: "struct L2Message";
        readonly name: "_message";
        readonly type: "tuple";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_proof";
        readonly type: "bytes32[]";
    }];
    readonly name: "proveL2MessageInclusion";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_stateTransitionManager";
        readonly type: "address";
    }];
    readonly name: "removeStateTransitionManager";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "mintValue";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "l2Contract";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "l2Calldata";
            readonly type: "bytes";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2GasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2GasPerPubdataByteLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes[]";
            readonly name: "factoryDeps";
            readonly type: "bytes[]";
        }, {
            readonly internalType: "address";
            readonly name: "refundRecipient";
            readonly type: "address";
        }];
        readonly internalType: "struct L2TransactionRequestDirect";
        readonly name: "_request";
        readonly type: "tuple";
    }];
    readonly name: "requestL2TransactionDirect";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "canonicalTxHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint256";
            readonly name: "chainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "mintValue";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2Value";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2GasLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "l2GasPerPubdataByteLimit";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "refundRecipient";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "secondBridgeAddress";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "secondBridgeValue";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "secondBridgeCalldata";
            readonly type: "bytes";
        }];
        readonly internalType: "struct L2TransactionRequestTwoBridgesOuter";
        readonly name: "_request";
        readonly type: "tuple";
    }];
    readonly name: "requestL2TransactionTwoBridges";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "canonicalTxHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_newPendingAdmin";
        readonly type: "address";
    }];
    readonly name: "setPendingAdmin";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_sharedBridge";
        readonly type: "address";
    }];
    readonly name: "setSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "sharedBridge";
    readonly outputs: readonly [{
        readonly internalType: "contract IL1SharedBridge";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_chainId";
        readonly type: "uint256";
    }];
    readonly name: "stateTransitionManager";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_stateTransitionManager";
        readonly type: "address";
    }];
    readonly name: "stateTransitionManagerIsRegistered";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_baseToken";
        readonly type: "address";
    }];
    readonly name: "tokenIsRegistered";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}]>;
export declare const ContractDeployerContract: web3.Contract<readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "accountAddress";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "enum IContractDeployer.AccountNonceOrdering";
        readonly name: "nonceOrdering";
        readonly type: "uint8";
    }];
    readonly name: "AccountNonceOrderingUpdated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "accountAddress";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "enum IContractDeployer.AccountAbstractionVersion";
        readonly name: "aaVersion";
        readonly type: "uint8";
    }];
    readonly name: "AccountVersionUpdated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "deployerAddress";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "bytecodeHash";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "contractAddress";
        readonly type: "address";
    }];
    readonly name: "ContractDeployed";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "_salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "_input";
        readonly type: "bytes";
    }];
    readonly name: "create";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "_salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "_input";
        readonly type: "bytes";
    }];
    readonly name: "create2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "_salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "_input";
        readonly type: "bytes";
    }, {
        readonly internalType: "enum IContractDeployer.AccountAbstractionVersion";
        readonly name: "_aaVersion";
        readonly type: "uint8";
    }];
    readonly name: "create2Account";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "_input";
        readonly type: "bytes";
    }, {
        readonly internalType: "enum IContractDeployer.AccountAbstractionVersion";
        readonly name: "_aaVersion";
        readonly type: "uint8";
    }];
    readonly name: "createAccount";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "extendedAccountVersion";
    readonly outputs: readonly [{
        readonly internalType: "enum IContractDeployer.AccountAbstractionVersion";
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "bytecodeHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "callConstructor";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "input";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ContractDeployer.ForceDeployment";
        readonly name: "_deployment";
        readonly type: "tuple";
    }, {
        readonly internalType: "address";
        readonly name: "_sender";
        readonly type: "address";
    }];
    readonly name: "forceDeployOnAddress";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "bytes32";
            readonly name: "bytecodeHash";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "newAddress";
            readonly type: "address";
        }, {
            readonly internalType: "bool";
            readonly name: "callConstructor";
            readonly type: "bool";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "input";
            readonly type: "bytes";
        }];
        readonly internalType: "struct ContractDeployer.ForceDeployment[]";
        readonly name: "_deployments";
        readonly type: "tuple[]";
    }];
    readonly name: "forceDeployOnAddresses";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "getAccountInfo";
    readonly outputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "enum IContractDeployer.AccountAbstractionVersion";
            readonly name: "supportedAAVersion";
            readonly type: "uint8";
        }, {
            readonly internalType: "enum IContractDeployer.AccountNonceOrdering";
            readonly name: "nonceOrdering";
            readonly type: "uint8";
        }];
        readonly internalType: "struct IContractDeployer.AccountInfo";
        readonly name: "info";
        readonly type: "tuple";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_sender";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_senderNonce";
        readonly type: "uint256";
    }];
    readonly name: "getNewAddressCreate";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "newAddress";
        readonly type: "address";
    }];
    readonly stateMutability: "pure";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_sender";
        readonly type: "address";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_salt";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "_input";
        readonly type: "bytes";
    }];
    readonly name: "getNewAddressCreate2";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "newAddress";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IContractDeployer.AccountAbstractionVersion";
        readonly name: "_version";
        readonly type: "uint8";
    }];
    readonly name: "updateAccountVersion";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "enum IContractDeployer.AccountNonceOrdering";
        readonly name: "_nonceOrdering";
        readonly type: "uint8";
    }];
    readonly name: "updateNonceOrdering";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}]>;
export declare const L1MessengerContract: web3.Contract<readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: false;
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }];
    readonly name: "BytecodeL1PublicationRequested";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "_sender";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "_hash";
        readonly type: "bytes32";
    }, {
        readonly indexed: false;
        readonly internalType: "bytes";
        readonly name: "_message";
        readonly type: "bytes";
    }];
    readonly name: "L1MessageSent";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly components: readonly [{
            readonly internalType: "uint8";
            readonly name: "l2ShardId";
            readonly type: "uint8";
        }, {
            readonly internalType: "bool";
            readonly name: "isService";
            readonly type: "bool";
        }, {
            readonly internalType: "uint16";
            readonly name: "txNumberInBlock";
            readonly type: "uint16";
        }, {
            readonly internalType: "address";
            readonly name: "sender";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "key";
            readonly type: "bytes32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "value";
            readonly type: "bytes32";
        }];
        readonly indexed: false;
        readonly internalType: "struct L2ToL1Log";
        readonly name: "_l2log";
        readonly type: "tuple";
    }];
    readonly name: "L2ToL1LogSent";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "_bytecodeHash";
        readonly type: "bytes32";
    }];
    readonly name: "requestBytecodeL1Publication";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bool";
        readonly name: "_isService";
        readonly type: "bool";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_key";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_value";
        readonly type: "bytes32";
    }];
    readonly name: "sendL2ToL1Log";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "logIdInMerkleTree";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "bytes";
        readonly name: "_message";
        readonly type: "bytes";
    }];
    readonly name: "sendToL1";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}]>;
export declare const IERC20Contract: web3.Contract<readonly [{
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "name";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "string";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly name: "_spender";
        readonly type: "address";
    }, {
        readonly name: "_value";
        readonly type: "uint256";
    }];
    readonly name: "approve";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
    }];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "totalSupply";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly name: "_from";
        readonly type: "address";
    }, {
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly name: "_value";
        readonly type: "uint256";
    }];
    readonly name: "transferFrom";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
    }];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "decimals";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint8";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly name: "_owner";
        readonly type: "address";
    }];
    readonly name: "balanceOf";
    readonly outputs: readonly [{
        readonly name: "balance";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [];
    readonly name: "symbol";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "string";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly constant: false;
    readonly inputs: readonly [{
        readonly name: "_to";
        readonly type: "address";
    }, {
        readonly name: "_value";
        readonly type: "uint256";
    }];
    readonly name: "transfer";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "bool";
    }];
    readonly payable: false;
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly constant: true;
    readonly inputs: readonly [{
        readonly name: "_owner";
        readonly type: "address";
    }, {
        readonly name: "_spender";
        readonly type: "address";
    }];
    readonly name: "allowance";
    readonly outputs: readonly [{
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly payable: false;
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly payable: true;
    readonly stateMutability: "payable";
    readonly type: "fallback";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly name: "owner";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly name: "spender";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Approval";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "Transfer";
    readonly type: "event";
}]>;
export declare const IERC1271Contract: web3.Contract<readonly [{
    readonly inputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "hash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "bytes";
        readonly name: "signature";
        readonly type: "bytes";
    }];
    readonly name: "isValidSignature";
    readonly outputs: readonly [{
        readonly internalType: "bytes4";
        readonly name: "magicValue";
        readonly type: "bytes4";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}]>;
export declare const L1BridgeContract: web3.Contract<readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "l1Token";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "ClaimedFailedDeposit";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "bytes32";
        readonly name: "l2DepositTxHash";
        readonly type: "bytes32";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "from";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "address";
        readonly name: "l1Token";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "DepositInitiated";
    readonly type: "event";
}, {
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "to";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "l1Token";
        readonly type: "address";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly name: "WithdrawalFinalized";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_depositSender";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_l2TxHash";
        readonly type: "bytes32";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint16";
        readonly name: "_l2TxNumberInBatch";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_merkleProof";
        readonly type: "bytes32[]";
    }];
    readonly name: "claimFailedDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l2Receiver";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2TxGasLimit";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2TxGasPerPubdataByte";
        readonly type: "uint256";
    }];
    readonly name: "deposit";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "txHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l2Receiver";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2TxGasLimit";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2TxGasPerPubdataByte";
        readonly type: "uint256";
    }, {
        readonly internalType: "address";
        readonly name: "_refundRecipient";
        readonly type: "address";
    }];
    readonly name: "deposit";
    readonly outputs: readonly [{
        readonly internalType: "bytes32";
        readonly name: "txHash";
        readonly type: "bytes32";
    }];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_account";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }, {
        readonly internalType: "bytes32";
        readonly name: "_depositL2TxHash";
        readonly type: "bytes32";
    }];
    readonly name: "depositAmount";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "amount";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint16";
        readonly name: "_l2TxNumberInBatch";
        readonly type: "uint16";
    }, {
        readonly internalType: "bytes";
        readonly name: "_message";
        readonly type: "bytes";
    }, {
        readonly internalType: "bytes32[]";
        readonly name: "_merkleProof";
        readonly type: "bytes32[]";
    }];
    readonly name: "finalizeWithdrawal";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_l2BatchNumber";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_l2MessageIndex";
        readonly type: "uint256";
    }];
    readonly name: "isWithdrawalFinalized";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "l2Bridge";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }];
    readonly name: "l2TokenAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "l2TokenBeacon";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "sharedBridge";
    readonly outputs: readonly [{
        readonly internalType: "contract IL1SharedBridge";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }];
    readonly name: "transferTokenToSharedBridge";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}]>;
export declare const L2BridgeContract: web3.Contract<readonly [{
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l1Sender";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l2Receiver";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }, {
        readonly internalType: "bytes";
        readonly name: "_data";
        readonly type: "bytes";
    }];
    readonly name: "finalizeDeposit";
    readonly outputs: readonly [];
    readonly stateMutability: "payable";
    readonly type: "function";
}, {
    readonly inputs: readonly [];
    readonly name: "l1Bridge";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l2Token";
        readonly type: "address";
    }];
    readonly name: "l1TokenAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l1Token";
        readonly type: "address";
    }];
    readonly name: "l2TokenAddress";
    readonly outputs: readonly [{
        readonly internalType: "address";
        readonly name: "";
        readonly type: "address";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_l1Receiver";
        readonly type: "address";
    }, {
        readonly internalType: "address";
        readonly name: "_l2Token";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_amount";
        readonly type: "uint256";
    }];
    readonly name: "withdraw";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}]>;
export declare const NonceHolderContract: web3.Contract<readonly [{
    readonly anonymous: false;
    readonly inputs: readonly [{
        readonly indexed: true;
        readonly internalType: "address";
        readonly name: "accountAddress";
        readonly type: "address";
    }, {
        readonly indexed: true;
        readonly internalType: "uint256";
        readonly name: "key";
        readonly type: "uint256";
    }, {
        readonly indexed: false;
        readonly internalType: "uint256";
        readonly name: "value";
        readonly type: "uint256";
    }];
    readonly name: "ValueSetUnderNonce";
    readonly type: "event";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "getDeploymentNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "getMinNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "getRawNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_key";
        readonly type: "uint256";
    }];
    readonly name: "getValueUnderNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_value";
        readonly type: "uint256";
    }];
    readonly name: "increaseMinNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }];
    readonly name: "incrementDeploymentNonce";
    readonly outputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "";
        readonly type: "uint256";
    }];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_expectedNonce";
        readonly type: "uint256";
    }];
    readonly name: "incrementMinNonceIfEquals";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_nonce";
        readonly type: "uint256";
    }];
    readonly name: "isNonceUsed";
    readonly outputs: readonly [{
        readonly internalType: "bool";
        readonly name: "";
        readonly type: "bool";
    }];
    readonly stateMutability: "view";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "uint256";
        readonly name: "_key";
        readonly type: "uint256";
    }, {
        readonly internalType: "uint256";
        readonly name: "_value";
        readonly type: "uint256";
    }];
    readonly name: "setValueUnderNonce";
    readonly outputs: readonly [];
    readonly stateMutability: "nonpayable";
    readonly type: "function";
}, {
    readonly inputs: readonly [{
        readonly internalType: "address";
        readonly name: "_address";
        readonly type: "address";
    }, {
        readonly internalType: "uint256";
        readonly name: "_key";
        readonly type: "uint256";
    }, {
        readonly internalType: "bool";
        readonly name: "_shouldBeUsed";
        readonly type: "bool";
    }];
    readonly name: "validateNonceUsage";
    readonly outputs: readonly [];
    readonly stateMutability: "view";
    readonly type: "function";
}]>;
export declare const evenHex: (hex: string) => string;
export declare const toBytes: (number: web3Types.Numbers | Uint8Array) => Uint8Array;
export declare function concat(bytes: web3Types.Bytes[]): string;
export declare function contractFunctionId(value: string): string;
export declare class SignatureObject {
    r: Uint8Array;
    s: Uint8Array;
    v: bigint;
    constructor(r: Uint8Array, s: Uint8Array, v: web3Types.Numbers);
    constructor(signature: string | SignatureLike);
    static getNormalizedV(v: number): 27 | 28;
    concat(datas: ReadonlyArray<Bytes>): string;
    get yParity(): 0 | 1;
    get serialized(): string;
    toString(): string;
}
export type SignatureLike = SignatureObject | EthereumSignature | string;
export declare const MessagePrefix: string;
export declare function hashMessage(message: Uint8Array | string): string;
export declare function isETH(token: web3.Address): boolean;
export declare function sleep(millis: number): Promise<unknown>;
export declare function layer1TxDefaults(): {
    queueType: PriorityQueueType.Deque;
    opTree: PriorityOpTree.Full;
};
export declare function getHashedL2ToL1Msg(sender: web3.Address, msg: web3Types.Bytes, txNumberInBlock: number): string;
export declare function getDeployedContracts(receipt: web3Types.TransactionReceipt): DeploymentInfo[];
export declare function create2Address(sender: web3Types.Address, bytecodeHash: web3Types.Bytes, salt: web3Types.Bytes, input?: web3Types.Bytes): string;
export declare function createAddress(sender: web3.Address, senderNonce: web3Types.Numbers): string;
export declare function checkBaseCost(baseCost: web3Types.Numbers, value: web3Types.Numbers | Promise<web3Types.Numbers>): Promise<void>;
export declare function hashBytecode(bytecode: web3Types.Bytes): Uint8Array;
export declare function getL2HashFromPriorityOp(txReceipt: web3Types.TransactionReceipt, zkSyncAddress: web3.Address): string;
export declare function applyL1ToL2Alias(address: string): string;
export declare function undoL1ToL2Alias(address: string): string;
export declare function getERC20DefaultBridgeData(l1TokenAddress: string, context: web3.Web3): Promise<string>;
export declare function getERC20BridgeCalldata(l1TokenAddress: string, l1Sender: string, l2Receiver: string, amount: web3Types.Numbers, bridgeData: web3Types.Bytes): Promise<string>;
export declare function isMessageSignatureCorrect(context: web3.Web3Context, address: string, message: Uint8Array | string, signature: SignatureLike): Promise<boolean>;
export declare function isTypedDataSignatureCorrect(context: web3.Web3Context, address: string, domain: web3Types.Eip712TypedData['domain'], types: web3Types.Eip712TypedData['types'], value: Record<string, any>, signature: SignatureLike): Promise<boolean>;
export declare function estimateDefaultBridgeDepositL2Gas(providerL1: web3.Web3, providerL2: Web3ZKsyncL2, token: web3.Address, amount: web3Types.Numbers, to: web3.Address, from?: web3.Address, gasPerPubdataByte?: web3Types.Numbers): Promise<web3Types.Numbers>;
export declare function scaleGasLimit(gasLimit: bigint): bigint;
export declare function estimateCustomBridgeDepositL2Gas(providerL2: Web3ZKsyncL2, l1BridgeAddress: web3.Address, l2BridgeAddress: web3.Address, token: web3.Address, amount: web3Types.Numbers, to: web3.Address, bridgeData: web3Types.Bytes, from: web3.Address, gasPerPubdataByte?: web3Types.Numbers, l2Value?: web3Types.Numbers): Promise<web3Types.Numbers>;
export declare function toJSON(object: any): string;
export declare function isAddressEq(a: web3.Address, b: web3.Address): boolean;
export declare function waitTxReceipt(web3Eth: Web3Eth, txHash: string): Promise<TransactionReceipt>;
export declare function waitTxByHashConfirmation(web3Eth: Web3Eth, txHash: TransactionHash, waitConfirmations?: number): Promise<TransactionReceipt>;
export declare const getPriorityOpResponse: (context: Web3ZKsyncL1 | Web3ZKsyncL2, l1TxPromise: Promise<TransactionHash>, contextL2?: Web3ZKsyncL2) => Promise<PriorityOpResponse>;
export declare const getPriorityOpL1Response: (context: Web3ZKsyncL1, l1TxPromise: Promise<TransactionHash>, contextL2?: Web3ZKsyncL2) => Promise<PriorityOpResponse>;
export declare const getPriorityOpL2Response: (context: Web3ZKsyncL2, txPromise: Promise<TransactionHash>) => Promise<PriorityL2OpResponse>;
export declare function waitTxByHashConfirmationFinalized(web3Eth: Web3Eth, txHash: TransactionHash, waitConfirmations?: number, blogTag?: BlockNumberOrTag): Promise<TransactionReceipt>;
export declare function id(value: string): string;
export declare function dataSlice(data: Bytes, start?: number, end?: number): string;
export declare function toUtf8Bytes(str: string): Uint8Array;
export declare function getAddress(address: string): string;
export interface Addressable {
    getAddress(): Promise<string>;
}
export declare function resolveAddress(target: Address | Addressable | Promise<string>, resolver?: null | NameResolver): string | Promise<string>;
//# sourceMappingURL=utils.d.ts.map
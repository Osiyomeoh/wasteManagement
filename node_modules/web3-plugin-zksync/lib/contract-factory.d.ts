import type { ContractAbi } from 'web3';
import { Web3Context } from 'web3';
import type * as web3Types from 'web3-types';
import { Contract } from 'web3-eth-contract';
import type { DeploymentType } from './types';
import type { ZKsyncWallet } from './zksync-wallet';
interface CustomData {
    factoryDeps?: (string | {
        object: string;
    })[];
    salt?: string;
}
interface Overrides {
    customData?: CustomData;
}
export declare class ContractFactory<Abi extends ContractAbi> extends Web3Context {
    readonly abi: Abi;
    readonly bytecode: string;
    readonly zkWallet: ZKsyncWallet;
    readonly deploymentType: DeploymentType;
    readonly contractToBeDeployed: Contract<Abi>;
    constructor(abi: Abi, bytecode: web3Types.Bytes, zkWallet: ZKsyncWallet, deploymentType?: DeploymentType);
    private encodeCalldata;
    protected checkOverrides(overrides?: Overrides): void;
    getDeployTransaction(args?: web3Types.ContractConstructorArgs<Abi>, overrides?: Overrides): Promise<Omit<web3Types.Transaction, 'to'>>;
    deploy(args?: web3Types.ContractConstructorArgs<Abi>, overrides?: Overrides): Promise<Contract<Abi> & {
        deploymentTransaction(): web3Types.TransactionReceipt;
    }>;
}
export {};
//# sourceMappingURL=contract-factory.d.ts.map
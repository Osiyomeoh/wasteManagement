"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ContractFactory = void 0;
const web3_1 = require("web3");
const web3Utils = __importStar(require("web3-utils"));
const utils_1 = require("./utils");
const constants_1 = require("./constants");
const types_1 = require("./types");
class ContractFactory extends web3_1.Web3Context {
    constructor(abi, bytecode, zkWallet, deploymentType) {
        super(zkWallet.provider);
        this.abi = abi;
        if (bytecode instanceof Uint8Array) {
            this.bytecode = web3Utils.bytesToHex(bytecode);
        }
        else {
            if (typeof bytecode === 'object' && bytecode.object) {
                bytecode = bytecode.object;
            }
            if (typeof bytecode === 'string' && !bytecode.startsWith('0x')) {
                bytecode = '0x' + bytecode;
            }
            this.bytecode = web3Utils.bytesToHex(bytecode);
        }
        this.zkWallet = zkWallet;
        this.deploymentType = deploymentType || 'create';
        this.contractToBeDeployed = new zkWallet.provider.eth.Contract(this.abi);
    }
    encodeCalldata(salt, bytecodeHash, constructorCalldata) {
        const contractDeploymentArgs = [
            salt,
            web3Utils.bytesToHex(bytecodeHash),
            constructorCalldata,
        ];
        const accountDeploymentArgs = [
            ...contractDeploymentArgs,
            types_1.AccountAbstractionVersion.Version1,
        ];
        switch (this.deploymentType) {
            case 'create':
                return utils_1.ContractDeployerContract.methods
                    .create(...contractDeploymentArgs)
                    .encodeABI();
            case 'createAccount':
                return utils_1.ContractDeployerContract.methods
                    .createAccount(...accountDeploymentArgs)
                    .encodeABI();
            case 'create2':
                return utils_1.ContractDeployerContract.methods
                    .create2(...contractDeploymentArgs)
                    .encodeABI();
            case 'create2Account':
                return utils_1.ContractDeployerContract.methods
                    .create2Account(...accountDeploymentArgs)
                    .encodeABI();
            default:
                throw new Error(`Unsupported deployment type: ${this.deploymentType}!`);
        }
    }
    checkOverrides(overrides) {
        if (this.deploymentType === 'create2' || this.deploymentType === 'create2Account') {
            if (!overrides || !overrides.customData || !overrides.customData.salt) {
                throw new Error('Salt is required for CREATE2 deployment!');
            }
            if (!overrides.customData.salt.startsWith('0x') ||
                overrides.customData.salt.length !== 66) {
                throw new Error('Invalid salt provided!');
            }
        }
        if (overrides &&
            overrides.customData &&
            overrides.customData.factoryDeps !== null &&
            overrides.customData.factoryDeps !== undefined &&
            !Array.isArray(overrides.customData.factoryDeps)) {
            throw new Error("Invalid 'factoryDeps' format! It should be an array of bytecodes.");
        }
    }
    async getDeployTransaction(args = [], overrides) {
        var _a, _b, _c;
        let constructorArgs;
        const txRequest = this.contractToBeDeployed
            .deploy({
            data: this.bytecode,
            arguments: args,
        })
            .populateTransaction({
            from: this.zkWallet.getAddress() ?? this.defaultAccount ?? undefined,
        });
        this.checkOverrides(overrides);
        let overridesCopy = overrides ?? {
            customData: { factoryDeps: [], salt: constants_1.ZERO_HASH },
        };
        if (overrides) {
            overridesCopy = overrides;
            overridesCopy.customData ?? (overridesCopy.customData = {});
            (_a = overridesCopy.customData).salt ?? (_a.salt = constants_1.ZERO_HASH);
            overridesCopy.customData.factoryDeps = (overridesCopy.customData.factoryDeps ?? []).map(normalizeBytecode);
        }
        else {
            overridesCopy = {
                customData: { factoryDeps: [], salt: constants_1.ZERO_HASH },
            };
        }
        constructorArgs = args;
        const bytecodeHash = (0, utils_1.hashBytecode)(this.bytecode);
        const constructorCalldata = web3Utils.hexToBytes(web3_1.eth.abi.encodeParameters(this.contractToBeDeployed.options.jsonInterface
            .filter(item => item.type === 'constructor')
            .map(item => item.inputs)[0] ?? [], constructorArgs));
        const deployCalldata = this.encodeCalldata(overridesCopy?.customData?.salt, bytecodeHash, constructorCalldata);
        if (txRequest.customData && txRequest.customData.salt) {
            delete txRequest.customData.salt;
        }
        const tx = {
            ...txRequest,
            to: constants_1.CONTRACT_DEPLOYER_ADDRESS,
            data: deployCalldata,
            type: constants_1.EIP712_TX_TYPE,
        };
        tx.customData ?? (tx.customData = {});
        (_b = tx.customData).factoryDeps ?? (_b.factoryDeps = overridesCopy?.customData?.factoryDeps);
        (_c = tx.customData).gasPerPubdata ?? (_c.gasPerPubdata = constants_1.DEFAULT_GAS_PER_PUBDATA_LIMIT);
        if (!tx.customData || !tx.customData.factoryDeps.includes(this.bytecode)) {
            tx.customData.factoryDeps.push(this.bytecode);
        }
        const txNoUndefined = Object.entries(tx)
            .filter(([, value]) => value !== undefined)
            .reduce((obj, [key, value]) => {
            obj[key] = value;
            return obj;
        }, {});
        return txNoUndefined;
    }
    async deploy(args, overrides) {
        const tx = await this.getDeployTransaction(args, overrides);
        const receipt = await (await this.zkWallet?.sendTransaction(tx)).wait();
        const deployedAddresses = (0, utils_1.getDeployedContracts)(receipt).map(info => info.deployedAddress);
        this.contractToBeDeployed.options.address = deployedAddresses[deployedAddresses.length - 1];
        const contractWithCorrectAddress = this.contractToBeDeployed.clone();
        contractWithCorrectAddress.deploymentTransaction = () => receipt;
        return contractWithCorrectAddress;
    }
}
exports.ContractFactory = ContractFactory;
function normalizeBytecode(bytecode) {
    if (bytecode instanceof Uint8Array) {
        bytecode = web3Utils.bytesToHex(bytecode);
    }
    else {
        if (typeof bytecode === 'object') {
            bytecode = bytecode.object;
        }
        if (!bytecode.startsWith('0x')) {
            bytecode = '0x' + bytecode;
        }
        bytecode = web3Utils.bytesToHex(web3Utils.hexToBytes(bytecode));
    }
    return bytecode;
}
//# sourceMappingURL=contract-factory.js.map
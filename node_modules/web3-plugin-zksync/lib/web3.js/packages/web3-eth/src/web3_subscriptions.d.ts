import { SyncOutput, Address, BlockNumberOrTag, HexString, Topic, BlockHeaderOutput, LogsOutput } from 'web3-types';
import { Web3Subscription } from 'web3-core';
export declare class LogsSubscription extends Web3Subscription<{
    data: LogsOutput;
}, {
    readonly fromBlock?: BlockNumberOrTag;
    readonly address?: Address | Address[];
    readonly topics?: Topic[];
}> {
    protected _buildSubscriptionParams(): (string | {
        readonly fromBlock?: BlockNumberOrTag | undefined;
        readonly address?: string | string[] | undefined;
        readonly topics?: string[] | undefined;
    })[];
    protected formatSubscriptionResult(data: LogsOutput): {
        readonly id?: string | undefined;
        readonly removed: boolean;
        readonly logIndex?: string | number | bigint | undefined;
        readonly transactionIndex?: string | number | bigint | undefined;
        readonly transactionHash?: string | undefined;
        readonly blockHash?: string | undefined;
        readonly blockNumber?: string | number | bigint | undefined;
        readonly address: string;
        readonly topics: string[];
        readonly data: string;
    };
}
export declare class NewPendingTransactionsSubscription extends Web3Subscription<{
    data: HexString;
}> {
    protected _buildSubscriptionParams(): string[];
    protected formatSubscriptionResult(data: string): string;
}
export declare class NewHeadsSubscription extends Web3Subscription<{
    data: BlockHeaderOutput;
}> {
    protected _buildSubscriptionParams(): string[];
    protected formatSubscriptionResult(data: BlockHeaderOutput): BlockHeaderOutput;
}
export declare class SyncingSubscription extends Web3Subscription<{
    data: SyncOutput;
    changed: boolean;
}> {
    protected _buildSubscriptionParams(): string[];
    _processSubscriptionResult(data: {
        syncing: boolean;
        status: SyncOutput;
    } | boolean): void;
}
//# sourceMappingURL=web3_subscriptions.d.ts.map
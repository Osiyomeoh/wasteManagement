"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.decodeEventABI = void 0;
const web3_utils_1 = require("web3-utils");
const web3_types_1 = require("web3-types");
const web3_eth_abi_1 = require("web3-eth-abi");
const schemas_js_1 = require("../schemas.js");
const constants_js_1 = require("../constants.js");
const decodeEventABI = (event, data, jsonInterface, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT) => {
    let modifiedEvent = { ...event };
    const result = (0, web3_utils_1.format)(schemas_js_1.logSchema, data, returnFormat);
    if ([constants_js_1.ALL_EVENTS, 'allEvents'].includes(modifiedEvent.name)) {
        const matchedEvent = jsonInterface.find(j => j.signature === data.topics[0]);
        if (matchedEvent) {
            modifiedEvent = matchedEvent;
        }
        else {
            modifiedEvent = { anonymous: true };
        }
    }
    modifiedEvent.inputs = modifiedEvent.inputs ?? event.inputs ?? [];
    if (!modifiedEvent.anonymous) {
        let indexedInputs = 0;
        (modifiedEvent.inputs ?? []).forEach(input => {
            if (input.indexed) {
                indexedInputs += 1;
            }
        });
        if (indexedInputs > 0 && data?.topics && data?.topics.length !== indexedInputs + 1) {
            modifiedEvent = {
                ...modifiedEvent,
                anonymous: true,
                inputs: [],
            };
        }
    }
    const argTopics = modifiedEvent.anonymous ? data.topics : (data.topics ?? []).slice(1);
    return {
        ...result,
        returnValues: (0, web3_eth_abi_1.decodeLog)([...(modifiedEvent.inputs ?? [])], data.data, argTopics),
        event: modifiedEvent.name,
        signature: modifiedEvent.anonymous || !data.topics || data.topics.length === 0 || !data.topics[0]
            ? undefined
            : data.topics[0],
        raw: {
            data: data.data,
            topics: data.topics,
        },
    };
};
exports.decodeEventABI = decodeEventABI;
//# sourceMappingURL=decoding.js.map
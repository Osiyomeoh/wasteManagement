"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.waitForTransactionReceipt = void 0;
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const reject_if_block_timeout_js_1 = require("./reject_if_block_timeout.js");
const rpc_method_wrappers_js_1 = require("../rpc_method_wrappers.js");
async function waitForTransactionReceipt(web3Context, transactionHash, returnFormat, customGetTransactionReceipt) {
    const pollingInterval = web3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval;
    const [awaitableTransactionReceipt, IntervalId] = (0, web3_utils_1.pollTillDefinedAndReturnIntervalId)(async () => {
        try {
            return (customGetTransactionReceipt ?? rpc_method_wrappers_js_1.getTransactionReceipt)(web3Context, transactionHash, returnFormat);
        }
        catch (error) {
            console.warn('An error happen while trying to get the transaction receipt', error);
            return undefined;
        }
    }, pollingInterval);
    const [timeoutId, rejectOnTimeout] = (0, web3_utils_1.rejectIfTimeout)(web3Context.transactionPollingTimeout, new web3_errors_1.TransactionPollingTimeoutError({
        numberOfSeconds: web3Context.transactionPollingTimeout / 1000,
        transactionHash,
    }));
    const [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await (0, reject_if_block_timeout_js_1.rejectIfBlockTimeout)(web3Context, transactionHash);
    try {
        return await Promise.race([
            awaitableTransactionReceipt,
            rejectOnTimeout,
            rejectOnBlockTimeout,
        ]);
    }
    finally {
        if (timeoutId)
            clearTimeout(timeoutId);
        if (IntervalId)
            clearInterval(IntervalId);
        blockTimeoutResourceCleaner.clean();
    }
}
exports.waitForTransactionReceipt = waitForTransactionReceipt;
//# sourceMappingURL=wait_for_transaction_receipt.js.map
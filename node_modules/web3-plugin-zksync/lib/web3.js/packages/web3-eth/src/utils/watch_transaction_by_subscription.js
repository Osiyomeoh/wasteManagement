"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchTransactionBySubscription = void 0;
const web3_utils_1 = require("web3-utils");
const schemas_js_1 = require("../schemas.js");
const watch_transaction_by_polling_js_1 = require("./watch_transaction_by_polling.js");
const watchTransactionBySubscription = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat, }) => {
    let needToWatchLater = true;
    let lastCaughtBlockHash;
    setImmediate(() => {
        web3Context.subscriptionManager
            ?.subscribe('newHeads')
            .then((subscription) => {
            subscription.on('data', async (newBlockHeader) => {
                needToWatchLater = false;
                if (!newBlockHeader?.number ||
                    lastCaughtBlockHash === newBlockHeader?.parentHash) {
                    return;
                }
                lastCaughtBlockHash = newBlockHeader?.parentHash;
                const confirmations = BigInt(newBlockHeader.number) -
                    BigInt(transactionReceipt.blockNumber) +
                    BigInt(1);
                transactionPromiEvent.emit('confirmation', {
                    confirmations: (0, web3_utils_1.format)({ format: 'uint' }, confirmations, returnFormat),
                    receipt: (0, web3_utils_1.format)(customTransactionReceiptSchema ?? schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),
                    latestBlockHash: (0, web3_utils_1.format)({ format: 'bytes32' }, newBlockHeader.parentHash, returnFormat),
                });
                if (confirmations >= web3Context.transactionConfirmationBlocks) {
                    await web3Context.subscriptionManager?.removeSubscription(subscription);
                }
            });
            subscription.on('error', async () => {
                await web3Context.subscriptionManager?.removeSubscription(subscription);
                needToWatchLater = false;
                (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({
                    web3Context,
                    transactionReceipt,
                    transactionPromiEvent,
                    customTransactionReceiptSchema,
                    returnFormat,
                });
            });
        })
            .catch(() => {
            needToWatchLater = false;
            (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({
                web3Context,
                transactionReceipt,
                customTransactionReceiptSchema,
                transactionPromiEvent,
                returnFormat,
            });
        });
    });
    setTimeout(() => {
        if (needToWatchLater) {
            (0, watch_transaction_by_polling_js_1.watchTransactionByPolling)({
                web3Context,
                transactionReceipt,
                transactionPromiEvent,
                returnFormat,
            });
        }
    }, web3Context.blockHeaderTimeout * 1000);
};
exports.watchTransactionBySubscription = watchTransactionBySubscription;
//# sourceMappingURL=watch_transaction_by_subscription.js.map
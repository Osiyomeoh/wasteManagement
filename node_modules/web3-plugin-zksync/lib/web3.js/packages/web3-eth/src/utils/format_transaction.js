"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.formatTransaction = void 0;
const web3_types_1 = require("web3-types");
const web3_validator_1 = require("web3-validator");
const web3_utils_1 = require("web3-utils");
const web3_errors_1 = require("web3-errors");
const schemas_js_1 = require("../schemas.js");
function formatTransaction(transaction, returnFormat = web3_types_1.DEFAULT_RETURN_FORMAT, options = {
    transactionSchema: schemas_js_1.transactionInfoSchema,
    fillInputAndData: false,
}) {
    let formattedTransaction = (0, web3_utils_1.mergeDeep)({}, transaction);
    if (!(0, web3_validator_1.isNullish)(transaction?.common)) {
        formattedTransaction.common = { ...transaction.common };
        if (!(0, web3_validator_1.isNullish)(transaction.common?.customChain))
            formattedTransaction.common.customChain = { ...transaction.common.customChain };
    }
    formattedTransaction = (0, web3_utils_1.format)(options.transactionSchema ?? schemas_js_1.transactionInfoSchema, formattedTransaction, returnFormat);
    if (!(0, web3_validator_1.isNullish)(formattedTransaction.data) &&
        !(0, web3_validator_1.isNullish)(formattedTransaction.input) &&
        (0, web3_utils_1.toHex)(formattedTransaction.data) !== (0, web3_utils_1.toHex)(formattedTransaction.input))
        throw new web3_errors_1.TransactionDataAndInputError({
            data: (0, web3_utils_1.bytesToHex)(formattedTransaction.data),
            input: (0, web3_utils_1.bytesToHex)(formattedTransaction.input),
        });
    if (options.fillInputAndData) {
        if (!(0, web3_validator_1.isNullish)(formattedTransaction.data)) {
            formattedTransaction.input = formattedTransaction.data;
        }
        else if (!(0, web3_validator_1.isNullish)(formattedTransaction.input)) {
            formattedTransaction.data = formattedTransaction.input;
        }
    }
    if (!(0, web3_validator_1.isNullish)(formattedTransaction.gasLimit)) {
        formattedTransaction.gas = formattedTransaction.gasLimit;
        delete formattedTransaction.gasLimit;
    }
    return formattedTransaction;
}
exports.formatTransaction = formatTransaction;
//# sourceMappingURL=format_transaction.js.map
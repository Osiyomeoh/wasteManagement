"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.watchTransactionByPolling = void 0;
const web3_utils_1 = require("web3-utils");
const web3_rpc_methods_1 = require("web3-rpc-methods");
const schemas_js_1 = require("../schemas.js");
const watchTransactionByPolling = ({ web3Context, transactionReceipt, transactionPromiEvent, customTransactionReceiptSchema, returnFormat, }) => {
    let confirmations = 1;
    const intervalId = setInterval(() => {
        (async () => {
            if (confirmations >= web3Context.transactionConfirmationBlocks) {
                clearInterval(intervalId);
                return;
            }
            const nextBlock = await web3_rpc_methods_1.ethRpcMethods.getBlockByNumber(web3Context.requestManager, (0, web3_utils_1.numberToHex)(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);
            if (nextBlock?.hash) {
                confirmations += 1;
                transactionPromiEvent.emit('confirmation', {
                    confirmations: (0, web3_utils_1.format)({ format: 'uint' }, confirmations, returnFormat),
                    receipt: (0, web3_utils_1.format)(customTransactionReceiptSchema ?? schemas_js_1.transactionReceiptSchema, transactionReceipt, returnFormat),
                    latestBlockHash: (0, web3_utils_1.format)({ format: 'bytes32' }, nextBlock.hash, returnFormat),
                });
            }
        })();
    }, web3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval);
};
exports.watchTransactionByPolling = watchTransactionByPolling;
//# sourceMappingURL=watch_transaction_by_polling.js.map
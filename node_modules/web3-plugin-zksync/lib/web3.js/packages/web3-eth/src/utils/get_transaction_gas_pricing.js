"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getTransactionGasPricing = void 0;
const web3_types_1 = require("web3-types");
const web3_validator_1 = require("web3-validator");
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const rpc_method_wrappers_js_1 = require("../rpc_method_wrappers.js");
const transaction_builder_js_1 = require("./transaction_builder.js");
async function getEip1559GasPricing(transaction, web3Context, returnFormat) {
    const block = await (0, rpc_method_wrappers_js_1.getBlock)(web3Context, web3Context.defaultBlock, false, web3_types_1.ETH_DATA_FORMAT);
    if ((0, web3_validator_1.isNullish)(block.baseFeePerGas))
        throw new web3_errors_1.Eip1559NotSupportedError();
    let gasPrice;
    if ((0, web3_validator_1.isNullish)(transaction.gasPrice) && BigInt(block.baseFeePerGas) === BigInt(0)) {
        gasPrice = await (0, rpc_method_wrappers_js_1.getGasPrice)(web3Context, returnFormat);
    }
    if (!(0, web3_validator_1.isNullish)(transaction.gasPrice) || !(0, web3_validator_1.isNullish)(gasPrice)) {
        const convertedTransactionGasPrice = (0, web3_utils_1.format)({ format: 'uint' }, transaction.gasPrice ?? gasPrice, returnFormat);
        return {
            maxPriorityFeePerGas: convertedTransactionGasPrice,
            maxFeePerGas: convertedTransactionGasPrice,
        };
    }
    return {
        maxPriorityFeePerGas: (0, web3_utils_1.format)({ format: 'uint' }, transaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas, returnFormat),
        maxFeePerGas: (0, web3_utils_1.format)({ format: 'uint' }, (transaction.maxFeePerGas ??
            BigInt(block.baseFeePerGas) * BigInt(2) +
                BigInt(transaction.maxPriorityFeePerGas ?? web3Context.defaultMaxPriorityFeePerGas)), returnFormat),
    };
}
async function getTransactionGasPricing(transaction, web3Context, returnFormat) {
    const transactionType = (0, transaction_builder_js_1.getTransactionType)(transaction, web3Context);
    if (!(0, web3_validator_1.isNullish)(transactionType)) {
        if (transactionType.startsWith('-'))
            throw new web3_errors_1.UnsupportedTransactionTypeError(transactionType);
        if (Number(transactionType) < 0 || Number(transactionType) > 127)
            throw new web3_errors_1.UnsupportedTransactionTypeError(transactionType);
        if ((0, web3_validator_1.isNullish)(transaction.gasPrice) &&
            (transactionType === '0x0' || transactionType === '0x1'))
            return {
                gasPrice: await (0, rpc_method_wrappers_js_1.getGasPrice)(web3Context, returnFormat),
                maxPriorityFeePerGas: undefined,
                maxFeePerGas: undefined,
            };
        if (transactionType === '0x2') {
            return {
                gasPrice: undefined,
                ...(await getEip1559GasPricing(transaction, web3Context, returnFormat)),
            };
        }
    }
    return undefined;
}
exports.getTransactionGasPricing = getTransactionGasPricing;
//# sourceMappingURL=get_transaction_gas_pricing.js.map
"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Web3Eth = exports.registeredSubscriptions = void 0;
const web3_types_1 = require("web3-types");
const web3_core_1 = require("web3-core");
const web3_errors_1 = require("web3-errors");
const web3_utils_1 = require("web3-utils");
const web3_rpc_methods_1 = require("web3-rpc-methods");
const rpcMethodsWrappers = __importStar(require("./rpc_method_wrappers.js"));
const web3_subscriptions_js_1 = require("./web3_subscriptions.js");
exports.registeredSubscriptions = {
    logs: web3_subscriptions_js_1.LogsSubscription,
    newPendingTransactions: web3_subscriptions_js_1.NewPendingTransactionsSubscription,
    newHeads: web3_subscriptions_js_1.NewHeadsSubscription,
    syncing: web3_subscriptions_js_1.SyncingSubscription,
    pendingTransactions: web3_subscriptions_js_1.NewPendingTransactionsSubscription,
    newBlockHeaders: web3_subscriptions_js_1.NewHeadsSubscription,
};
class Web3Eth extends web3_core_1.Web3Context {
    constructor(providerOrContext) {
        if (typeof providerOrContext === 'string' ||
            (0, web3_core_1.isSupportedProvider)(providerOrContext)) {
            super({
                provider: providerOrContext,
                registeredSubscriptions: exports.registeredSubscriptions,
            });
            return;
        }
        if (providerOrContext.registeredSubscriptions) {
            super(providerOrContext);
            return;
        }
        super({
            ...providerOrContext,
            registeredSubscriptions: exports.registeredSubscriptions,
        });
        this.getFeeData = this.calculateFeeData;
    }
    setTransactionMiddleware(transactionMiddleware) {
        this.transactionMiddleware = transactionMiddleware;
    }
    getTransactionMiddleware() {
        return this.transactionMiddleware;
    }
    async getProtocolVersion() {
        return web3_rpc_methods_1.ethRpcMethods.getProtocolVersion(this.requestManager);
    }
    async isSyncing() {
        return web3_rpc_methods_1.ethRpcMethods.getSyncing(this.requestManager);
    }
    async getCoinbase() {
        return web3_rpc_methods_1.ethRpcMethods.getCoinbase(this.requestManager);
    }
    async isMining() {
        return web3_rpc_methods_1.ethRpcMethods.getMining(this.requestManager);
    }
    async getHashrate(returnFormat = (this.defaultReturnFormat ??
        web3_types_1.DEFAULT_RETURN_FORMAT)) {
        return this.getHashRate(returnFormat);
    }
    async getHashRate(returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getHashRate(this, returnFormat);
    }
    async getGasPrice(returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getGasPrice(this, returnFormat);
    }
    async getMaxPriorityFeePerGas(returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getMaxPriorityFeePerGas(this, returnFormat);
    }
    async calculateFeeData(baseFeePerGasFactor = BigInt(2), alternativeMaxPriorityFeePerGas = web3_utils_1.ethUnitMap.Gwei) {
        const block = await this.getBlock(undefined, false);
        const baseFeePerGas = block?.baseFeePerGas ?? undefined;
        let gasPrice;
        try {
            gasPrice = await this.getGasPrice();
        }
        catch (error) {
        }
        let maxPriorityFeePerGas;
        try {
            maxPriorityFeePerGas = await this.getMaxPriorityFeePerGas();
        }
        catch (error) {
        }
        let maxFeePerGas;
        if (baseFeePerGas) {
            maxPriorityFeePerGas = maxPriorityFeePerGas ?? alternativeMaxPriorityFeePerGas;
            maxFeePerGas = baseFeePerGas * baseFeePerGasFactor + maxPriorityFeePerGas;
        }
        return { gasPrice, maxFeePerGas, maxPriorityFeePerGas, baseFeePerGas };
    }
    async getAccounts() {
        const hexAddresses = (await web3_rpc_methods_1.ethRpcMethods.getAccounts(this.requestManager)) ?? [];
        return hexAddresses.map(address => (0, web3_utils_1.toChecksumAddress)(address));
    }
    async getBlockNumber(returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getBlockNumber(this, returnFormat);
    }
    async getBalance(address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getBalance(this, address, blockNumber, returnFormat);
    }
    async getStorageAt(address, storageSlot, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getStorageAt(this, address, storageSlot, blockNumber, returnFormat);
    }
    async getCode(address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getCode(this, address, blockNumber, returnFormat);
    }
    async getBlock(block = this.defaultBlock, hydrated = false, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getBlock(this, block, hydrated, returnFormat);
    }
    async getBlockTransactionCount(block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getBlockTransactionCount(this, block, returnFormat);
    }
    async getBlockUncleCount(block = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getBlockUncleCount(this, block, returnFormat);
    }
    async getUncle(block = this.defaultBlock, uncleIndex, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getUncle(this, block, uncleIndex, returnFormat);
    }
    async getTransaction(transactionHash, returnFormat = this.defaultReturnFormat) {
        const response = await rpcMethodsWrappers.getTransaction(this, transactionHash, returnFormat);
        if (!response)
            throw new web3_errors_1.TransactionNotFound();
        return response;
    }
    async getPendingTransactions(returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getPendingTransactions(this, returnFormat);
    }
    async getTransactionFromBlock(block = this.defaultBlock, transactionIndex, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getTransactionFromBlock(this, block, transactionIndex, returnFormat);
    }
    async getTransactionReceipt(transactionHash, returnFormat = this.defaultReturnFormat) {
        const response = await rpcMethodsWrappers.getTransactionReceipt(this, transactionHash, returnFormat);
        if (!response)
            throw new web3_errors_1.TransactionNotFound();
        return response;
    }
    async getTransactionCount(address, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getTransactionCount(this, address, blockNumber, returnFormat);
    }
    sendTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
        return rpcMethodsWrappers.sendTransaction(this, transaction, returnFormat, options, this.transactionMiddleware);
    }
    sendSignedTransaction(transaction, returnFormat = this.defaultReturnFormat, options) {
        return rpcMethodsWrappers.sendSignedTransaction(this, transaction, returnFormat, options);
    }
    async sign(message, addressOrIndex, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.sign(this, message, addressOrIndex, returnFormat);
    }
    async signTransaction(transaction, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.signTransaction(this, transaction, returnFormat);
    }
    async call(transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.call(this, transaction, blockNumber, returnFormat);
    }
    async estimateGas(transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.estimateGas(this, transaction, blockNumber, returnFormat);
    }
    async getPastLogs(filter, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getLogs(this, filter, returnFormat);
    }
    async getWork() {
        return web3_rpc_methods_1.ethRpcMethods.getWork(this.requestManager);
    }
    async submitWork(nonce, hash, digest) {
        return web3_rpc_methods_1.ethRpcMethods.submitWork(this.requestManager, nonce, hash, digest);
    }
    async requestAccounts() {
        return web3_rpc_methods_1.ethRpcMethods.requestAccounts(this.requestManager);
    }
    async getChainId(returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getChainId(this, returnFormat);
    }
    async getNodeInfo() {
        return web3_rpc_methods_1.ethRpcMethods.getNodeInfo(this.requestManager);
    }
    async getProof(address, storageKeys, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getProof(this, address, storageKeys, blockNumber, returnFormat);
    }
    async getFeeHistory(blockCount, newestBlock = this.defaultBlock, rewardPercentiles, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.getFeeHistory(this, blockCount, newestBlock, rewardPercentiles, returnFormat);
    }
    async createAccessList(transaction, blockNumber = this.defaultBlock, returnFormat = this.defaultReturnFormat) {
        return rpcMethodsWrappers.createAccessList(this, transaction, blockNumber, returnFormat);
    }
    async signTypedData(address, typedData, useLegacy = false, returnFormat = (this.defaultReturnFormat ??
        web3_types_1.DEFAULT_RETURN_FORMAT)) {
        return rpcMethodsWrappers.signTypedData(this, address, typedData, useLegacy, returnFormat);
    }
    async subscribe(name, args, returnFormat = (this.defaultReturnFormat ??
        web3_types_1.DEFAULT_RETURN_FORMAT)) {
        const subscription = await this.subscriptionManager?.subscribe(name, args, returnFormat);
        if (subscription instanceof web3_subscriptions_js_1.LogsSubscription &&
            name === 'logs' &&
            typeof args === 'object' &&
            !(0, web3_utils_1.isNullish)(args.fromBlock) &&
            Number.isFinite(Number(args.fromBlock))) {
            setImmediate(() => {
                this.getPastLogs(args)
                    .then(logs => {
                    for (const log of logs) {
                        subscription._processSubscriptionResult(log);
                    }
                })
                    .catch(e => {
                    subscription._processSubscriptionError(e);
                });
            });
        }
        return subscription;
    }
    static shouldClearSubscription({ sub }) {
        return !(sub instanceof web3_subscriptions_js_1.SyncingSubscription);
    }
    clearSubscriptions(notClearSyncing = false) {
        return this.subscriptionManager?.unsubscribe(notClearSyncing ? Web3Eth.shouldClearSubscription : undefined);
    }
}
exports.Web3Eth = Web3Eth;
//# sourceMappingURL=web3_eth.js.map
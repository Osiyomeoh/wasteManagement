import { Address, Uint } from './eth_types.js';
import { SupportedProviders } from './web3_base_provider.js';
import { Bytes, HexString } from './primitives_types.js';
import { EthExecutionAPI } from './apis/eth_execution_api.js';
import { AbiFragment, ContractAbi } from './eth_abi_types.js';
export interface ContractInitOptions {
    readonly gas?: Uint;
    readonly gasLimit?: Uint;
    readonly gasPrice?: Uint;
    readonly from?: Address;
    readonly data?: Bytes;
    readonly input?: Bytes;
    readonly provider?: SupportedProviders<EthExecutionAPI> | string;
    readonly syncWithContext?: boolean;
    readonly dataInputFill?: 'data' | 'input' | 'both';
}
export interface NonPayableCallOptions {
    nonce?: HexString;
    from?: Address;
    gas?: string;
    maxPriorityFeePerGas?: HexString;
    maxFeePerGas?: HexString;
    gasPrice?: string;
    type?: string | number;
    data?: HexString;
    input?: HexString;
}
export interface PayableCallOptions extends NonPayableCallOptions {
    value?: string;
}
export type ContractAbiWithSignature = ReadonlyArray<AbiFragment & {
    signature: HexString;
}>;
export interface ContractOptions {
    readonly gas?: Uint;
    readonly gasPrice?: Uint;
    readonly from?: Address;
    readonly input?: Bytes;
    readonly data?: Bytes;
    get jsonInterface(): ContractAbiWithSignature;
    set jsonInterface(value: ContractAbi);
    address?: Address;
    maxPriorityFeePerGas?: Uint;
    maxFeePerGas?: Uint;
}
//# sourceMappingURL=eth_contract_types.d.ts.map
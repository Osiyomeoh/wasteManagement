import type { Web3RequestManager } from 'web3-core';
import type * as web3Types from 'web3-types';
import type { DataFormat } from 'web3-types/src/data_format_types';
import type { BatchDetails, BlockDetails, BridgeAddresses, EstimateFee, L2ToL1Proof, StorageProof, RawBlockTransaction, TransactionDetails, WalletBalances, TransactionRequest, Address } from './types';
export declare class RpcMethods {
    requestManager: Web3RequestManager<unknown>;
    constructor(requestManager: Web3RequestManager<unknown>);
    private _send;
    l1ChainId(returnFormat?: DataFormat): Promise<bigint>;
    getL1BatchNumber(returnFormat?: DataFormat): Promise<bigint>;
    getL1BatchDetails(number: web3Types.Numbers, returnFormat?: DataFormat): Promise<BatchDetails>;
    getBlockDetails(number: web3Types.Numbers, returnFormat?: DataFormat): Promise<BlockDetails>;
    getTransactionDetails(txHash: web3Types.Bytes, returnFormat?: DataFormat): Promise<TransactionDetails>;
    getBytecodeByHash(bytecodeHash: web3Types.Bytes, returnFormat?: DataFormat): Promise<Uint8Array>;
    getRawBlockTransactions(number: web3Types.Numbers, returnFormat?: DataFormat): Promise<RawBlockTransaction[]>;
    estimateFee(transaction: Partial<web3Types.TransactionWithSenderAPI>, returnFormat?: DataFormat): Promise<EstimateFee>;
    getBaseTokenL1Address(): Promise<web3Types.Address>;
    getTestnetPaymasterAddress(): Promise<web3Types.Address | null>;
    estimateGasL1ToL2(transaction: Partial<TransactionRequest>, returnFormat?: DataFormat): Promise<web3Types.Numbers>;
    getAllAccountBalances(address: web3Types.Address, returnFormat?: DataFormat): Promise<WalletBalances>;
    getMainContract(returnFormat?: DataFormat): Promise<web3Types.Address>;
    getL1BatchBlockRange(number: web3Types.Numbers, returnFormat?: DataFormat): Promise<web3Types.Bytes[]>;
    getProof(address: web3Types.Address, keys: string[], l1BatchNumber: web3Types.Numbers, returnFormat?: DataFormat): Promise<StorageProof>;
    getL2ToL1LogProof(txHash: web3Types.HexString32Bytes, l2ToL1LogIndex?: web3Types.Numbers, returnFormat?: DataFormat): Promise<L2ToL1Proof>;
    getBridgeContracts(returnFormat?: DataFormat): Promise<BridgeAddresses>;
    getBridgehubContractAddress(returnFormat?: DataFormat): Promise<Address>;
}
//# sourceMappingURL=rpc.methods.d.ts.map
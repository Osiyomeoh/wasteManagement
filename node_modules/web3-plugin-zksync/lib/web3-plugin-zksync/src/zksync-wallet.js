"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZKsyncWallet = void 0;
const web3_eth_accounts_1 = require("web3-eth-accounts");
const utils = __importStar(require("./utils"));
const adapters_1 = require("./adapters");
const utils_1 = require("./utils");
class Adapters extends adapters_1.AdapterL1 {
    constructor() {
        super();
        this.adapterL2 = new adapters_1.AdapterL2();
        this.adapterL2.getAddress = this.getAddress.bind(this);
        this.adapterL2._contextL2 = this._contextL2.bind(this);
        this.adapterL2._eip712Signer = this._eip712Signer;
    }
    getBalance(token, blockTag = 'committed') {
        return this.adapterL2.getBalance(token, blockTag);
    }
    getAllBalances() {
        return this.adapterL2.getAllBalances();
    }
    async populateTransaction(tx) {
        return this.adapterL2.populateTransaction(tx);
    }
    getDeploymentNonce() {
        return this.adapterL2.getDeploymentNonce();
    }
    getL2BridgeContracts() {
        return this.adapterL2.getL2BridgeContracts();
    }
    async _eip712Signer() {
        throw new Error('Must be implemented by the derived class!');
    }
    withdraw(transaction) {
        return this.adapterL2.withdraw(transaction);
    }
    async transfer(transaction) {
        return this.signAndSend((await this.adapterL2.transferTx(transaction)), this._contextL2());
    }
}
class ZKsyncWallet extends Adapters {
    constructor(privateKey, providerL2, providerL1) {
        super();
        this.account = (0, web3_eth_accounts_1.privateKeyToAccount)(privateKey);
        if (providerL2) {
            this.connect(providerL2);
        }
        if (providerL1) {
            this.connectToL1(providerL1);
        }
    }
    connect(provider) {
        if (!provider.eth.accounts.wallet.get(this.account.address)) {
            provider.eth.accounts.wallet.add(provider.eth.accounts.privateKeyToAccount(this.account.privateKey));
        }
        this.provider = provider;
        this.provider._eip712Signer = this._eip712Signer.bind(this);
        return this;
    }
    connectToL1(provider) {
        if (!provider.eth.accounts.wallet.get(this.account.address)) {
            provider.eth.accounts.wallet.add(provider.eth.accounts.privateKeyToAccount(this.account.privateKey));
        }
        this.providerL1 = provider;
        return this;
    }
    async _eip712Signer() {
        if (!this.eip712) {
            this.eip712 = new utils.EIP712Signer(this.account, Number(await this.provider.eth.getChainId()));
        }
        return this.eip712;
    }
    _contextL1() {
        return this.providerL1;
    }
    _contextL2() {
        return this.provider;
    }
    getBalanceL1(token, blockTag) {
        return super.getBalanceL1(token, blockTag);
    }
    getBalance(token, blockTag = 'committed') {
        return super.getBalance(token, blockTag);
    }
    getAddress() {
        return this.account.address;
    }
    get address() {
        return this.getAddress();
    }
    deposit(transaction) {
        return super.deposit(transaction);
    }
    getNonce(blockNumber) {
        return this.provider?.eth.getTransactionCount(this.account.address, blockNumber);
    }
    static createRandom(provider, providerL1) {
        const acc = (0, web3_eth_accounts_1.create)();
        return new ZKsyncWallet(acc.privateKey, provider, providerL1);
    }
    async signTransaction(transaction) {
        const populated = (await this.populateTransaction(transaction));
        if (!(0, utils_1.isAddressEq)(populated.from, this.getAddress())) {
            throw new Error('Transaction from mismatch');
        }
        return this._contextL2().signTransaction(populated);
    }
    sendRawTransaction(signedTx) {
        return this._contextL2().sendRawTransaction(signedTx);
    }
    async populateTransaction(tx) {
        tx.from = tx.from ?? this.getAddress();
        return this._contextL2().populateTransaction(tx);
    }
    async getBridgehubContractAddress() {
        return this._contextL2().getBridgehubContractAddress();
    }
    async sendTransaction(transaction) {
        const signed = await this.signTransaction(transaction);
        return (0, utils_1.getPriorityOpResponse)(this._contextL2(), this.sendRawTransaction(signed));
    }
}
exports.ZKsyncWallet = ZKsyncWallet;
//# sourceMappingURL=zksync-wallet.js.map
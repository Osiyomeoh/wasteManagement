import type { Web3Account } from 'web3-eth-accounts';
import type * as web3Types from 'web3-types';
import type { Web3ZKsyncL2 } from './web3zksync-l2';
import type { Web3ZKsyncL1 } from './web3zksync-l1';
import * as utils from './utils';
import { AdapterL1, AdapterL2 } from './adapters';
import type { Address, Eip712TxData, PaymasterParams, TransactionOverrides } from './types';
import type { EIP712Signer } from './utils';
declare class Adapters extends AdapterL1 {
    adapterL2: AdapterL2;
    constructor();
    getBalance(token?: Address, blockTag?: web3Types.BlockNumberOrTag): Promise<bigint>;
    getAllBalances(): Promise<import("./types").WalletBalances>;
    populateTransaction(tx: web3Types.Transaction): Promise<web3Types.Transaction | Eip712TxData>;
    getDeploymentNonce(): Promise<bigint>;
    getL2BridgeContracts(): Promise<{
        erc20: import("web3-eth-contract").default<readonly [{
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l2Receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l1Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "_data";
                readonly type: "bytes";
            }];
            readonly name: "finalizeDeposit";
            readonly outputs: readonly [];
            readonly stateMutability: "payable";
            readonly type: "function";
        }, {
            readonly inputs: readonly [];
            readonly name: "l1Bridge";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l2Token";
                readonly type: "address";
            }];
            readonly name: "l1TokenAddress";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Token";
                readonly type: "address";
            }];
            readonly name: "l2TokenAddress";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l2Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }];
            readonly name: "withdraw";
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        }]>;
        weth: import("web3-eth-contract").default<readonly [{
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l2Receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l1Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "_data";
                readonly type: "bytes";
            }];
            readonly name: "finalizeDeposit";
            readonly outputs: readonly [];
            readonly stateMutability: "payable";
            readonly type: "function";
        }, {
            readonly inputs: readonly [];
            readonly name: "l1Bridge";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l2Token";
                readonly type: "address";
            }];
            readonly name: "l1TokenAddress";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Token";
                readonly type: "address";
            }];
            readonly name: "l2TokenAddress";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l2Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }];
            readonly name: "withdraw";
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        }]>;
        shared: import("web3-eth-contract").default<readonly [{
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l2Receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l1Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "_data";
                readonly type: "bytes";
            }];
            readonly name: "finalizeDeposit";
            readonly outputs: readonly [];
            readonly stateMutability: "payable";
            readonly type: "function";
        }, {
            readonly inputs: readonly [];
            readonly name: "l1Bridge";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l2Token";
                readonly type: "address";
            }];
            readonly name: "l1TokenAddress";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Token";
                readonly type: "address";
            }];
            readonly name: "l2TokenAddress";
            readonly outputs: readonly [{
                readonly internalType: "address";
                readonly name: "";
                readonly type: "address";
            }];
            readonly stateMutability: "view";
            readonly type: "function";
        }, {
            readonly inputs: readonly [{
                readonly internalType: "address";
                readonly name: "_l1Receiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "_l2Token";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "_amount";
                readonly type: "uint256";
            }];
            readonly name: "withdraw";
            readonly outputs: readonly [];
            readonly stateMutability: "nonpayable";
            readonly type: "function";
        }]>;
    }>;
    protected _eip712Signer(): Promise<EIP712Signer>;
    withdraw(transaction: {
        token: Address;
        amount: web3Types.Numbers;
        to?: Address;
        bridgeAddress?: Address;
        paymasterParams?: PaymasterParams;
        overrides?: TransactionOverrides;
    }): Promise<import("./types").PriorityOpResponse>;
    transfer(transaction: {
        to: Address;
        amount: web3Types.Numbers;
        token?: Address;
        paymasterParams?: PaymasterParams;
        overrides?: TransactionOverrides;
    }): Promise<import("./types").PriorityOpResponse>;
}
export declare class ZKsyncWallet extends Adapters {
    provider?: Web3ZKsyncL2;
    providerL1?: Web3ZKsyncL1;
    protected eip712: utils.EIP712Signer;
    account: Web3Account;
    constructor(privateKey: string, providerL2?: Web3ZKsyncL2, providerL1?: Web3ZKsyncL1);
    connect(provider: Web3ZKsyncL2): this;
    connectToL1(provider: Web3ZKsyncL1): this;
    protected _eip712Signer(): Promise<utils.EIP712Signer>;
    protected _contextL1(): Web3ZKsyncL1;
    protected _contextL2(): Web3ZKsyncL2;
    getBalanceL1(token?: Address, blockTag?: web3Types.BlockNumberOrTag): Promise<bigint>;
    getBalance(token?: Address, blockTag?: web3Types.BlockNumberOrTag): Promise<bigint>;
    getAddress(): any;
    get address(): any;
    deposit(transaction: {
        token: Address;
        amount: web3Types.Numbers;
        to?: Address;
        operatorTip?: web3Types.Numbers;
        bridgeAddress?: Address;
        approveERC20?: boolean;
        approveBaseERC20?: boolean;
        l2GasLimit?: web3Types.Numbers;
        gasPerPubdataByte?: web3Types.Numbers;
        refundRecipient?: Address;
        overrides?: TransactionOverrides;
        approveOverrides?: TransactionOverrides;
        approveBaseOverrides?: TransactionOverrides;
        customBridgeData?: web3Types.Bytes;
    }): Promise<import("./types").PriorityOpResponse>;
    getNonce(blockNumber?: web3Types.BlockNumberOrTag): Promise<bigint> | undefined;
    static createRandom(provider?: Web3ZKsyncL2, providerL1?: Web3ZKsyncL1): ZKsyncWallet;
    signTransaction(transaction: web3Types.Transaction): Promise<string>;
    sendRawTransaction(signedTx: string): Promise<string>;
    populateTransaction(tx: web3Types.Transaction): Promise<web3Types.Transaction | Eip712TxData>;
    getBridgehubContractAddress(): Promise<string>;
    sendTransaction(transaction: web3Types.Transaction): Promise<import("./types").PriorityOpResponse>;
}
export {};
//# sourceMappingURL=zksync-wallet.d.ts.map
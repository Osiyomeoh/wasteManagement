export declare const AddressSchema: {
    format: string;
};
export declare const IntSchema: {
    format: string;
};
export declare const UintSchema: {
    format: string;
};
export declare const BytesSchema: {
    format: string;
};
export declare const BytesArraySchema: {
    type: string;
    items: {
        format: string;
    };
};
export declare const BlockDetailsSchema: {
    type: string;
    properties: {
        number: {
            format: string;
        };
        timestamp: {
            type: string;
        };
        l1BatchNumber: {
            format: string;
        };
        l1TxCount: {
            format: string;
        };
        l2TxCount: {
            format: string;
        };
        rootHash: {
            format: string;
        };
        status: {
            format: string;
        };
        commitTxHash: {
            format: string;
        };
        committedAt: {
            format: string;
        };
        proveTxHash: {
            format: string;
        };
        provenAt: {
            format: string;
        };
        executeTxHash: {
            format: string;
        };
        executedAt: {
            format: string;
        };
    };
};
export declare const BatchDetailsSchema: {
    type: string;
    properties: {
        number: {
            format: string;
        };
        timestamp: {
            type: string;
        };
        l1TxCount: {
            format: string;
        };
        l2TxCount: {
            format: string;
        };
        rootHash: {
            format: string;
        };
        status: {
            format: string;
        };
        commitTxHash: {
            format: string;
        };
        committedAt: {
            format: string;
        };
        proveTxHash: {
            format: string;
        };
        provenAt: {
            format: string;
        };
        executeTxHash: {
            format: string;
        };
        executedAt: {
            format: string;
        };
        l1GasPrice: {
            format: string;
        };
        l2FairGasPrice: {
            format: string;
        };
        baseSystemContractsHashes: {
            type: string;
            properties: {
                bootloader: {
                    format: string;
                };
                default_aa: {
                    format: string;
                };
            };
        };
    };
};
export declare const TransactionDetailsSchema: {
    type: string;
    properties: {
        isL1Originated: {
            type: string;
        };
        status: {
            format: string;
        };
        fee: {
            format: string;
        };
        initiatorAddress: {
            format: string;
        };
        receivedAt: {
            format: string;
        };
        ethCommitTxHash: {
            format: string;
        };
        ethProveTxHash: {
            format: string;
        };
        ethExecuteTxHash: {
            format: string;
        };
    };
};
export declare const RawBlockTransactionSchema: {
    type: string;
    properties: {
        common_data: {
            type: string;
            properties: {
                L2: {
                    type: string;
                    properties: {
                        nonce: {
                            format: string;
                        };
                        fee: {
                            type: string;
                            properties: {
                                gas_limit: {
                                    format: string;
                                };
                                max_fee_per_gas: {
                                    format: string;
                                };
                                max_priority_fee_per_gas: {
                                    format: string;
                                };
                                gas_per_pubdata_limit: {
                                    format: string;
                                };
                            };
                        };
                        initiatorAddress: {
                            format: string;
                        };
                        signature: {
                            type: string;
                            items: {
                                format: string;
                            };
                        };
                        transactionType: {
                            format: string;
                        };
                        input: {
                            type: string;
                            properties: {
                                hash: {
                                    format: string;
                                };
                                data: {
                                    type: string;
                                    items: {
                                        format: string;
                                    };
                                };
                            };
                        };
                        paymasterParams: {
                            type: string;
                            properties: {
                                paymaster: {
                                    format: string;
                                };
                                paymasterInput: {
                                    type: string;
                                    items: {
                                        format: string;
                                    };
                                };
                            };
                        };
                    };
                };
            };
        };
        execute: {
            type: string;
            properties: {
                calldata: {
                    format: string;
                };
                contractAddress: {
                    format: string;
                };
                factoryDeps: {
                    type: string;
                    items: {
                        format: string;
                    };
                };
                value: {
                    format: string;
                };
            };
        };
        received_timestamp_ms: {
            format: string;
        };
        raw_bytes: {
            format: string;
        };
    };
};
export declare const RawBlockTransactionListSchema: {
    type: string;
    items: {
        type: string;
        properties: {
            common_data: {
                type: string;
                properties: {
                    L2: {
                        type: string;
                        properties: {
                            nonce: {
                                format: string;
                            };
                            fee: {
                                type: string;
                                properties: {
                                    gas_limit: {
                                        format: string;
                                    };
                                    max_fee_per_gas: {
                                        format: string;
                                    };
                                    max_priority_fee_per_gas: {
                                        format: string;
                                    };
                                    gas_per_pubdata_limit: {
                                        format: string;
                                    };
                                };
                            };
                            initiatorAddress: {
                                format: string;
                            };
                            signature: {
                                type: string;
                                items: {
                                    format: string;
                                };
                            };
                            transactionType: {
                                format: string;
                            };
                            input: {
                                type: string;
                                properties: {
                                    hash: {
                                        format: string;
                                    };
                                    data: {
                                        type: string;
                                        items: {
                                            format: string;
                                        };
                                    };
                                };
                            };
                            paymasterParams: {
                                type: string;
                                properties: {
                                    paymaster: {
                                        format: string;
                                    };
                                    paymasterInput: {
                                        type: string;
                                        items: {
                                            format: string;
                                        };
                                    };
                                };
                            };
                        };
                    };
                };
            };
            execute: {
                type: string;
                properties: {
                    calldata: {
                        format: string;
                    };
                    contractAddress: {
                        format: string;
                    };
                    factoryDeps: {
                        type: string;
                        items: {
                            format: string;
                        };
                    };
                    value: {
                        format: string;
                    };
                };
            };
            received_timestamp_ms: {
                format: string;
            };
            raw_bytes: {
                format: string;
            };
        };
    };
};
export declare const BridgeAddressesSchema: {
    type: string;
    properties: {
        l1Erc20DefaultBridge: {
            format: string;
        };
        l2Erc20DefaultBridge: {
            format: string;
        };
        l1WethBridge: {
            format: string;
        };
        l2WethBridge: {
            format: string;
        };
        l2SharedDefaultBridge: {
            format: string;
        };
        l1SharedDefaultBridge: {
            format: string;
        };
    };
};
export declare const L2ToL1ProofSchema: {
    type: string;
    properties: {
        proof: {
            type: string;
            items: {
                format: string;
            };
        };
        id: {
            format: string;
        };
        root: {
            format: string;
        };
    };
};
export declare const ProofSchema: {
    type: string;
    properties: {
        address: {
            format: string;
        };
        storageProof: {
            type: string;
            properties: {
                key: {
                    format: string;
                };
                proof: {
                    type: string;
                    items: {
                        format: string;
                    };
                };
                value: {
                    format: string;
                };
                index: {
                    format: string;
                };
            };
        };
    };
};
export declare const EstimateFeeSchema: {
    type: string;
    properties: {
        gas_limit: {
            format: string;
        };
        max_fee_per_gas: {
            format: string;
        };
        max_priority_fee_per_gas: {
            format: string;
        };
        gas_per_pubdata_limit: {
            format: string;
        };
    };
};
export declare const ZKTransactionReceiptSchema: {
    type: string;
    properties: {
        l1BatchNumber: {
            format: string;
        };
        l1BatchTxIndex: {
            format: string;
        };
        logs: {
            type: string;
            items: {
                type: string;
                properties: {
                    l1BatchNumber: {
                        format: string;
                    };
                    removed: {
                        format: string;
                    };
                    logIndex: {
                        format: string;
                    };
                    transactionIndex: {
                        format: string;
                    };
                    transactionHash: {
                        format: string;
                    };
                    blockHash: {
                        format: string;
                    };
                    blockNumber: {
                        format: string;
                    };
                    address: {
                        format: string;
                    };
                    data: {
                        format: string;
                    };
                    topics: {
                        type: string;
                        items: {
                            format: string;
                        };
                    };
                };
            };
        };
        l2ToL1Logs: {
            type: string;
            items: {
                type: string;
                properties: {
                    blockNumber: {
                        format: string;
                    };
                    blockHash: {
                        format: string;
                    };
                    l1BatchNumber: {
                        format: string;
                    };
                    transactionIndex: {
                        format: string;
                    };
                    shardId: {
                        format: string;
                    };
                    isService: {
                        format: string;
                    };
                    sender: {
                        format: string;
                    };
                    key: {
                        format: string;
                    };
                    value: {
                        format: string;
                    };
                    transactionHash: {
                        format: string;
                    };
                    logIndex: {
                        format: string;
                    };
                };
            };
        };
        transactionHash: {
            format: string;
        };
        transactionIndex: {
            format: string;
        };
        blockHash: {
            format: string;
        };
        blockNumber: {
            format: string;
        };
        from: {
            format: string;
        };
        to: {
            format: string;
        };
        cumulativeGasUsed: {
            format: string;
        };
        gasUsed: {
            format: string;
        };
        effectiveGasPrice: {
            format: string;
        };
        contractAddress: {
            format: string;
        };
        logsBloom: {
            format: string;
        };
        root: {
            format: string;
        };
        status: {
            format: string;
        };
        type: {
            format: string;
        };
    };
};
//# sourceMappingURL=schemas.d.ts.map
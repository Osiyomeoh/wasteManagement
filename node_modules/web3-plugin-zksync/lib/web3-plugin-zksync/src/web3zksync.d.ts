import type { Web3ContextInitOptions } from 'web3-core';
import type * as web3Types from 'web3-types';
import * as Web3 from 'web3';
import type { Transaction } from 'web3-types';
import type { BatchDetails, BlockDetails, BridgeAddresses, EstimateFee, L2ToL1Proof, StorageProof, RawBlockTransaction, TransactionDetails, WalletBalances, TransactionRequest, Address, TransactionOverrides, Eip712TxData, Eip712Meta } from './types';
import { type EIP712Signer } from './utils';
import { RpcMethods } from './rpc.methods';
export declare class Web3ZkSync extends Web3.Web3 {
    protected _rpc: RpcMethods;
    protected _contractAddresses: {
        bridgehubContract?: web3Types.Address;
        mainContract?: web3Types.Address;
        erc20BridgeL1?: web3Types.Address;
        erc20BridgeL2?: web3Types.Address;
        wethBridgeL1?: web3Types.Address;
        wethBridgeL2?: web3Types.Address;
        sharedBridgeL1?: web3Types.Address;
        sharedBridgeL2?: web3Types.Address;
        baseToken?: web3Types.Address;
    };
    protected contractAddresses(): {
        bridgehubContract?: web3Types.Address;
        mainContract?: web3Types.Address;
        erc20BridgeL1?: web3Types.Address;
        erc20BridgeL2?: web3Types.Address;
        wethBridgeL1?: web3Types.Address;
        wethBridgeL2?: web3Types.Address;
        sharedBridgeL1?: web3Types.Address;
        sharedBridgeL2?: web3Types.Address;
        baseToken?: web3Types.Address;
    };
    constructor(providerOrContext?: web3Types.SupportedProviders<any> | Web3ContextInitOptions | string);
    l1ChainId(returnFormat?: web3Types.DataFormat): Promise<bigint>;
    _eip712Signer(): Promise<EIP712Signer>;
    getL1BatchNumber(returnFormat?: web3Types.DataFormat): Promise<bigint>;
    getL1BatchDetails(number: web3Types.Numbers, returnFormat?: web3Types.DataFormat): Promise<BatchDetails>;
    getBlockDetails(number: web3Types.Numbers, returnFormat?: web3Types.DataFormat): Promise<BlockDetails>;
    getTransactionDetails(txHash: web3Types.Bytes, returnFormat?: web3Types.DataFormat): Promise<TransactionDetails>;
    getBytecodeByHash(bytecodeHash: web3Types.Bytes, returnFormat?: web3Types.DataFormat): Promise<Uint8Array>;
    getRawBlockTransactions(number: web3Types.Numbers, returnFormat?: web3Types.DataFormat): Promise<RawBlockTransaction[]>;
    estimateFee(transaction: Partial<web3Types.TransactionWithSenderAPI>, returnFormat?: web3Types.DataFormat): Promise<EstimateFee>;
    getBaseTokenContractAddress(): Promise<web3Types.Address>;
    isEthBasedChain(): Promise<boolean>;
    isBaseToken(token: web3Types.Address): Promise<boolean>;
    getTestnetPaymasterAddress(): Promise<web3Types.Address | null>;
    getDefaultBridgeAddresses(): Promise<{
        erc20L1: string;
        erc20L2: string;
        wethL1: string;
        wethL2: string;
        sharedL1: string;
        sharedL2: string;
    }>;
    estimateGasL1ToL2(transaction: Partial<TransactionRequest>, returnFormat?: web3Types.DataFormat): Promise<web3Types.Numbers>;
    getAllAccountBalances(address: web3Types.Address, returnFormat?: web3Types.DataFormat): Promise<WalletBalances>;
    getMainContract(returnFormat?: web3Types.DataFormat): Promise<web3Types.Address>;
    getL1BatchBlockRange(number: web3Types.Numbers, returnFormat?: web3Types.DataFormat): Promise<web3Types.Bytes[]>;
    getProof(address: web3Types.Address, keys: string[], l1BatchNumber: web3Types.Numbers, returnFormat?: web3Types.DataFormat): Promise<StorageProof>;
    getL2ToL1LogProof(txHash: web3Types.HexString32Bytes, l2ToL1LogIndex?: web3Types.Numbers, returnFormat?: web3Types.DataFormat): Promise<L2ToL1Proof>;
    getBridgeContracts(returnFormat?: web3Types.DataFormat): Promise<BridgeAddresses>;
    getBridgehubContractAddress(returnFormat?: web3Types.DataFormat): Promise<Address>;
    estimateL1ToL2Execute(transaction: {
        contractAddress: web3Types.Address;
        calldata: string;
        caller?: web3Types.Address;
        l2Value?: web3Types.Numbers;
        factoryDeps?: web3Types.Bytes[];
        gasPerPubdataByte?: web3Types.Numbers;
        overrides?: TransactionOverrides;
    }, returnFormat?: web3Types.DataFormat): Promise<web3Types.Numbers>;
    l2TokenAddress(token: Address): Promise<string>;
    getMainContractAddress(): Promise<Address>;
    getTokenBalance(token: Address, walletAddress: Address): Promise<bigint>;
    fillCustomData(data: Eip712Meta): Eip712Meta;
    private populateTransactionAndGasPrice;
    populateTransaction(transaction: Transaction): Promise<web3Types.Transaction | Eip712TxData>;
    signTransaction(tx: Transaction): Promise<string>;
    sendRawTransaction(signedTx: string): Promise<string>;
}
//# sourceMappingURL=web3zksync.d.ts.map
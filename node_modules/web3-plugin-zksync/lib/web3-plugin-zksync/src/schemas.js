"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ZKTransactionReceiptSchema = exports.EstimateFeeSchema = exports.ProofSchema = exports.L2ToL1ProofSchema = exports.BridgeAddressesSchema = exports.RawBlockTransactionListSchema = exports.RawBlockTransactionSchema = exports.TransactionDetailsSchema = exports.BatchDetailsSchema = exports.BlockDetailsSchema = exports.BytesArraySchema = exports.BytesSchema = exports.UintSchema = exports.IntSchema = exports.AddressSchema = void 0;
const web3_eth_1 = require("web3-eth");
exports.AddressSchema = { format: 'address' };
exports.IntSchema = { format: 'int' };
exports.UintSchema = { format: 'uint' };
exports.BytesSchema = { format: 'bytes' };
exports.BytesArraySchema = { type: 'array', items: { format: 'bytes' } };
exports.BlockDetailsSchema = {
    type: 'object',
    properties: {
        number: {
            format: 'uint',
        },
        timestamp: {
            type: 'number',
        },
        l1BatchNumber: {
            format: 'uint',
        },
        l1TxCount: {
            format: 'uint',
        },
        l2TxCount: {
            format: 'uint',
        },
        rootHash: {
            format: 'string',
        },
        status: {
            format: 'string',
        },
        commitTxHash: {
            format: 'string',
        },
        committedAt: {
            format: 'uint',
        },
        proveTxHash: {
            format: 'string',
        },
        provenAt: {
            format: 'uint',
        },
        executeTxHash: {
            format: 'string',
        },
        executedAt: {
            format: 'string',
        },
    },
};
exports.BatchDetailsSchema = {
    type: 'object',
    properties: {
        number: {
            format: 'uint',
        },
        timestamp: {
            type: 'number',
        },
        l1TxCount: { format: 'uint' },
        l2TxCount: { format: 'uint' },
        rootHash: {
            format: 'bytes32',
        },
        status: { format: 'string' },
        commitTxHash: {
            format: 'bytes32',
        },
        committedAt: { format: 'string' },
        proveTxHash: {
            format: 'bytes32',
        },
        provenAt: { format: 'string' },
        executeTxHash: {
            format: 'bytes32',
        },
        executedAt: { format: 'string' },
        l1GasPrice: { format: 'uint' },
        l2FairGasPrice: { format: 'uint' },
        baseSystemContractsHashes: {
            type: 'object',
            properties: {
                bootloader: {
                    format: 'bytes32',
                },
                default_aa: {
                    format: 'bytes32',
                },
            },
        },
    },
};
exports.TransactionDetailsSchema = {
    type: 'object',
    properties: {
        isL1Originated: { type: 'boolean' },
        status: { format: 'string' },
        fee: { format: 'uint' },
        initiatorAddress: { format: 'address' },
        receivedAt: { format: 'string' },
        ethCommitTxHash: { format: 'bytes32' },
        ethProveTxHash: { format: 'bytes32' },
        ethExecuteTxHash: { format: 'bytes32' },
    },
};
exports.RawBlockTransactionSchema = {
    type: 'object',
    properties: {
        common_data: {
            type: 'object',
            properties: {
                L2: {
                    type: 'object',
                    properties: {
                        nonce: { format: 'uint' },
                        fee: {
                            type: 'object',
                            properties: {
                                gas_limit: { format: 'uint' },
                                max_fee_per_gas: { format: 'uint' },
                                max_priority_fee_per_gas: { format: 'uint' },
                                gas_per_pubdata_limit: { format: 'uint' },
                            },
                        },
                        initiatorAddress: { format: 'address' },
                        signature: { type: 'array', items: { format: 'bytes' } },
                        transactionType: { format: 'string' },
                        input: {
                            type: 'object',
                            properties: {
                                hash: { format: 'string' },
                                data: { type: 'array', items: { format: 'bytes' } },
                            },
                        },
                        paymasterParams: {
                            type: 'object',
                            properties: {
                                paymaster: { format: 'address' },
                                paymasterInput: { type: 'array', items: { format: 'bytes' } },
                            },
                        },
                    },
                },
            },
        },
        execute: {
            type: 'object',
            properties: {
                calldata: { format: 'string' },
                contractAddress: { format: 'address' },
                factoryDeps: { type: 'array', items: { format: 'bytes' } },
                value: { format: 'uint' },
            },
        },
        received_timestamp_ms: { format: 'string' },
        raw_bytes: { format: 'string' },
    },
};
exports.RawBlockTransactionListSchema = {
    type: 'array',
    items: {
        ...exports.RawBlockTransactionSchema,
    },
};
exports.BridgeAddressesSchema = {
    type: 'object',
    properties: {
        l1Erc20DefaultBridge: { format: 'address' },
        l2Erc20DefaultBridge: { format: 'address' },
        l1WethBridge: { format: 'address' },
        l2WethBridge: { format: 'address' },
        l2SharedDefaultBridge: { format: 'address' },
        l1SharedDefaultBridge: { format: 'address' },
    },
};
exports.L2ToL1ProofSchema = {
    type: 'object',
    properties: {
        proof: {
            type: 'array',
            items: { format: 'bytes32' },
        },
        id: { format: 'uint' },
        root: { format: 'bytes32' },
    },
};
exports.ProofSchema = {
    type: 'object',
    properties: {
        address: { format: 'address' },
        storageProof: {
            type: 'array',
            properties: {
                key: { format: 'bytes' },
                proof: {
                    type: 'array',
                    items: { format: 'bytes32' },
                },
                value: { format: 'bytes' },
                index: { format: 'uint' },
            },
        },
    },
};
exports.EstimateFeeSchema = {
    type: 'object',
    properties: {
        gas_limit: { format: 'uint' },
        max_fee_per_gas: { format: 'uint' },
        max_priority_fee_per_gas: { format: 'uint' },
        gas_per_pubdata_limit: { format: 'uint' },
    },
};
exports.ZKTransactionReceiptSchema = {
    type: 'object',
    properties: {
        ...web3_eth_1.transactionReceiptSchema.properties,
        l1BatchNumber: { format: 'uint' },
        l1BatchTxIndex: { format: 'uint' },
        logs: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    ...web3_eth_1.transactionReceiptSchema.properties.logs.items.properties,
                    l1BatchNumber: { format: 'string' },
                },
            },
        },
        l2ToL1Logs: {
            type: 'array',
            items: {
                type: 'object',
                properties: {
                    blockNumber: { format: 'uint' },
                    blockHash: { format: 'string' },
                    l1BatchNumber: { format: 'string' },
                    transactionIndex: { format: 'uint' },
                    shardId: { format: 'uint' },
                    isService: { format: 'string' },
                    sender: { format: 'address' },
                    key: { format: 'string' },
                    value: { format: 'bytes' },
                    transactionHash: { format: 'string' },
                    logIndex: { format: 'string' },
                },
            },
        },
    },
};
//# sourceMappingURL=schemas.js.map
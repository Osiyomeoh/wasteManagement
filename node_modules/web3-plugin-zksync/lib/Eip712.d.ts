import type { Bytes, Eip712TypedData } from 'web3-types';
import type * as web3Accounts from 'web3-eth-accounts';
import type { Eip712SignedInput, Eip712TxData, EthereumSignature } from './types';
import { SignatureLike } from './utils';
export declare class EIP712 {
    static getSignInput(transaction: Eip712TxData): Eip712SignedInput;
    static txTypedData(transaction: Eip712TxData): Eip712TypedData;
    static txHash(transaction: Eip712TxData, ethSignature?: EthereumSignature): string;
    static fromSerializedTx(payload: Bytes): Eip712TxData;
    static getSignature(transaction: Eip712TxData, ethSignature?: EthereumSignature): Uint8Array;
    static raw(transaction: Eip712TxData, signature?: SignatureLike): (string | number | string[] | Uint8Array | Uint8Array[])[];
    static serialize(transaction: Eip712TxData, signature?: SignatureLike): string;
    static sign(hash: string, privateKey: string): web3Accounts.SignResult;
}
export declare class EIP712Signer {
    private eip712Domain;
    private web3Account;
    private chainId;
    constructor(web3Account: web3Accounts.Web3Account, chainId: number);
    sign(tx: Eip712TxData): Promise<string>;
    static getSignedDigest(transaction: Eip712TxData): Bytes;
    getDomain(): Eip712TypedData['domain'];
}
//# sourceMappingURL=Eip712.d.ts.map
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUpgradableContracts = exports.isOpenzeppelinContractsVersionValid = exports.checkOpenzeppelinVersions = exports.getWallet = void 0;
const plugin_1 = require("@matterlabs/hardhat-zksync-deploy/dist/plugin");
const deployer_helper_1 = require("@matterlabs/hardhat-zksync-deploy/dist/deployer-helper");
const semver_1 = __importDefault(require("semver"));
const chalk_1 = __importDefault(require("chalk"));
const constants_1 = require("./constants");
async function getWallet(hre, privateKeyOrIndex) {
    const { ethWeb3Provider, zkWeb3Provider } = (0, deployer_helper_1.createProviders)(hre.config.networks, hre.network);
    const wallet = (await (0, plugin_1.getWallet)(hre, privateKeyOrIndex ?? (0, plugin_1.getNetworkAccount)(hre)))
        .connect(zkWeb3Provider)
        .connectToL1(ethWeb3Provider);
    return wallet;
}
exports.getWallet = getWallet;
function checkOpenzeppelinVersions(wrappedFunction) {
    return function (...args) {
        try {
            if (!isOpenzeppelinContractsVersionValid()) {
                throw new Error(constants_1.OZ_CONTRACTS_VERISION_INCOMPATIBLE_ERROR);
            }
        }
        catch (e) {
            console.warn(chalk_1.default.yellow(e.message));
        }
        return wrappedFunction(...args);
    };
}
exports.checkOpenzeppelinVersions = checkOpenzeppelinVersions;
function isOpenzeppelinContractsVersionValid() {
    try {
        // eslint-disable-next-line import/no-extraneous-dependencies
        const versionContracts = require('@openzeppelin/contracts/package.json').version;
        if (!versionContracts || semver_1.default.lt(versionContracts, '4.6.0') || semver_1.default.gt(versionContracts, '5.0.0')) {
            return false;
        }
        return true;
    }
    catch (e) {
        return false;
    }
}
exports.isOpenzeppelinContractsVersionValid = isOpenzeppelinContractsVersionValid;
function getUpgradableContracts() {
    if (isOpenzeppelinContractsVersionValid()) {
        return constants_1.UPGRADEABLE_CONTRACTS_FROM_CONTRACTS;
    }
    return constants_1.UPGRADEABLE_CONTRACTS_FROM_ALIAS;
}
exports.getUpgradableContracts = getUpgradableContracts;
//# sourceMappingURL=utils.js.map